/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 *
 *PA5 - SPI1_CLK
 *PA6 - SPI1_MISO
 *PA7 - SPI1_MOSI
 *
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int ch = 0xAA;
void spi_init(void) {
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_SPI1_CLK_ENABLE();
	//General purpose output mode - PA4 (NSS)
	GPIOA->MODER &= ~(1U << 9);
	GPIOA->MODER |= (1U << 8);
	//Alternate function - PA5 (CK)
	GPIOA->MODER |= (1U << 11);
	GPIOA->MODER &= ~(1U << 10);
	//Alternate function - PA6 (MISO)
	GPIOA->MODER |= (1U << 13);
	GPIOA->MODER &= ~(1U << 12);
	//Alternate function - PA7 (MOSI)
	GPIOA->MODER |= (1U << 15);
	GPIOA->MODER &= ~(1U << 14);
	//Alternate Function register - NSS
//	GPIOA->AFR[0] &= ~(1U << 19);
//	GPIOA->AFR[0] |= (1U << 18);
//	GPIOA->AFR[0] &= ~(1U << 17);
//	GPIOA->AFR[0] |= (1U << 16);
	//Alternate Function register - Ck
	GPIOA->AFR[0] &= ~(1U << 23);
	GPIOA->AFR[0] |= (1U << 22);
	GPIOA->AFR[0] &= ~(1U << 21);
	GPIOA->AFR[0] |= (1U << 20);
	//Alternate Function register - MISO
	GPIOA->AFR[0] &= ~(1U << 27);
	GPIOA->AFR[0] |= (1U << 26);
	GPIOA->AFR[0] &= ~(1U << 25);
	GPIOA->AFR[0] |= (1U << 24);
	//Alternate Function register - MOSI
	GPIOA->AFR[0] &= ~(1U << 31);
	GPIOA->AFR[0] |= (1U << 30);
	GPIOA->AFR[0] &= ~(1U << 29);
	GPIOA->AFR[0] |= (1U << 28);
	//Configure NSS pin to Output and set high
	GPIOA->OTYPER &= ~(1U << 4);
	GPIOA->ODR |= (1U << 4);
	//Baud rate to /64
	SPI1->CR1 |= (1U << 5);
	SPI1->CR1 &= ~(1U << 4);
	SPI1->CR1 |= (1U << 3);
	//SPI mode -CPOL
	SPI1->CR1 &= ~(1U << 1);
	//SPI mode - CPHA
	SPI1->CR1 &= ~(1U << 0);
	//Master configuration
	SPI1->CR1 |= (1U << 2);
	//Data format - 8 bit data format
	SPI1->CR1 &= ~(1U << 11);
	//Software slave select enable
	SPI1->CR1 |= (1U << 8);
	SPI1->CR1 |= (1U << 9);
	//Enable SPE bit
	SPI1->CR1 |= (1U << 6);
}

void initSPI1(void) {
	// Enable GPIO
	RCC->APB2ENR |= (1U << 12);	//SPI1EN

	RCC->AHB1ENR |= (1U << 0);
	GPIOA->MODER |= (2U << 10) | (2U << 12) | (2U << 14);
	GPIOA->AFR[0] |= (5U << 20) | (5U << 24) | (5U << 28);	// AF05

	// Set PA4 (CS) as Output
	GPIOA->MODER |= (1U << 8);

	// Configure SPI1 as Master, Mode 0 (CPOL=0, CPHA=0)
	// The below code will also set the Bit1(CPOL) to 0 and Bit0(CPHA) to 0
	SPI1->CR1 = (1U << 1);	// MSTR -> Master Selection, 0: Slave, 1: Master

	SPI1->CR1 |= (1U << 8);	// Bit8 - SSI(Internal Slave Select)
	SPI1->CR1 |= (1U << 9);	// Bit9 - SSM(Software Slave Management)

	GPIOA->ODR |= (1U << 4);

	// Below sets BR to fPCLK/16
	SPI1->CR1 |= (5U << 3); //BR[2:0] -> Baud-rate control

	// Enable SPI
	SPI1->CR1 |= (1U << 6);	// SPE
}

void transmitSPI(uint8_t a_data) {
	while (!(SPI1->SR & (1U << 1)))
		;	// TXE

	SPI1->DR = a_data;

//	while (!(SPI1->SR & (1U << 7)))
//		;  // Wait for BSY to be cleared
}

uint8_t receiveSPI(void) {
	while (!(SPI1->SR & (1U << 0)))
		// Bit0 - RXNE
		;
	return SPI1->DR;
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	initSPI1();
//	spi_init();

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		GPIOA->ODR &= ~(1U << 4);  // Set CS low
		transmitSPI(0x55);
		HAL_Delay(1);
		GPIOA->ODR |= (1U << 4);   // Set CS high


		//Configure NSS pin to Low
//		GPIOA->ODR &= ~(1U << 4);
//		//Transmit
//		while (!(SPI1->SR & SPI_SR_TXE))
//			;
//		SPI1->DR = ch;
//		HAL_Delay(1);
//		GPIOA->ODR |= (1U << 4); //Set NSS
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
