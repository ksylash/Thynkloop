/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t rxData;

char buffer[100];

void UARTInit(void) {
	RCC->APB1ENR |= (1U << 17);	// USART2EN

	RCC->AHB1ENR |= (1U << 0);	// GPIOAEN
	GPIOA->MODER |= (2U << 4);	// PA2 - AF	Tx
	GPIOA->MODER |= (2U << 6);	// PA3 - AF	Rx
	GPIOA->AFR[0] |= (7U << 8);		//AF07
	GPIOA->AFR[0] |= (7U << 12);	//AF07

//	USART2->BRR = (104U << 4) | (3U << 0); // USARTDIV = 9600
	USART2->BRR = (8U << 4) | (11U << 0); // USARTDIV = 115200

	USART2->CR1 = (1U << 3) | (1U << 2);	// TE and RE
	USART2->CR1 |= (1U << 13);	// USARTEN
}

void UARTTransmit(uint8_t a_data) {
	while (!((1U << 7) & USART2->SR))
		;	//TXE

	USART2->DR = a_data;

	while (!((1U << 6) & USART2->SR))
		;	//TC
}

uint8_t UARTReceive(void) {
	while (!(USART2->SR & (1U << 5)))
		;	//RXNE

	return (USART2->DR);
}

uint32_t value = 0;

void ADCInit(void) {
	RCC->APB2ENR |= (1U << 8);

	RCC->AHB1ENR |= (1U << 0);

	GPIOA->MODER |= (3U << 0);

//	ADC1->CR1 &= (1U << 24);	//RES[25:24]
//	ADC1->CR1 &= (1U << 25);
	ADC1->CR1 = 0;

//	ADC1->CR2 &= (1U << 0);	//ADON -> OFF
	ADC1->CR2 = 0;

	ADC1->SQR3 = 0;	//SQ1[4:0] because Channel 0

	ADC->CCR = 0;	// ADCPRE[17:16] -> 00 makes pre-scalar divided by 2

	ADC1->CR2 = (1U << 0);	//ADC ON
}

uint32_t ADCRead(void) {
	ADC1->CR2 |= (1U << 30);	// SWSTART

	while (!(ADC1->SR & (1U << 1)))
		//EOC
		;

	return (ADC1->DR);
}

void timerInit(void) {
	RCC->APB1ENR |= (1U << 1);	//TIM3EN

	RCC->AHB1ENR |= (1U << 0);
	GPIOA->MODER |= (2U << 12);
//	GPIOA->AFR[0] |= (1U << 25);
	GPIOA->AFR[0] |= (2U << 24);

	TIM3->PSC = 15;	//16 000 000 / 16 = 1 000 000

	TIM3->ARR = 1999;  // 1 000 000/ 20 00 = 500Hz -> 2ms

	//	TIM3->PSC = 15;	//16 000 000 / 16 = 1 000 000
//
//	TIM3->ARR = 19999;  // 1 000 000/ 20 000 = 50Hz -> 20ms

	TIM3->CCR1 = 0;	// PWM = CCR1/ARR

	TIM3->CCMR1 = 0;	// Configured as output in bit 1:0
	TIM3->CCMR1 = (6U << 4);	//PWM mode 1
	TIM3->CCMR1 |= (1U << 3);	//OC preload enable

	TIM3->CCER |= (1U << 0);	//CC1E

	TIM3->CR1 |= (1U << 7);	//ARPE

	TIM3->CR1 |= (1U << 0);	//Timer/Counter enable
}

void setDuty(uint16_t args) {
	TIM3->CCR1 = args;
}

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	/* USER CODE BEGIN 2 */

	UARTInit();
	timerInit();

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//		rxData = UARTReceive();
		//		HAL_Delay(10);
		//		UARTTransmit(rxData);
//		value = ADCRead();
//
//		setDuty(value / 1.638);
		for (int i = 0; i < 2000; i += 1) {
			TIM3->CCR1 = i;
			HAL_Delay(1);
		}

		for (int i = 2000; i > 0; i -= 1) {
			TIM3->CCR1 = i;
			HAL_Delay(1);
		}
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
