
4_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003040  08003040  00004040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003048  08003048  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003050  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  080030b8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080030b8  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036f0  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa1  00000000  00000000  00008788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000498  00000000  00000000  00009730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000348  00000000  00000000  00009bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ac1  00000000  00000000  00009f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053b8  00000000  00000000  0001f9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f02  00000000  00000000  00024d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb4  00000000  00000000  000a8cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000aa884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002ea4 	.word	0x08002ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002ea4 	.word	0x08002ea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <UARTInit>:

uint8_t rxData;

char buffer[100];

void UARTInit(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1U << 17);	// USART2EN
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <UARTInit+0x70>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <UARTInit+0x70>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40

	RCC->AHB1ENR |= (1U << 0);	// GPIOAEN
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <UARTInit+0x70>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000584:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <UARTInit+0x70>)
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (2U << 4);	// PA2 - AF	Tx
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <UARTInit+0x74>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <UARTInit+0x74>)
 8000592:	f043 0320 	orr.w	r3, r3, #32
 8000596:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U << 6);	// PA3 - AF	Rx
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <UARTInit+0x74>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <UARTInit+0x74>)
 800059e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7U << 8);		//AF07
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <UARTInit+0x74>)
 80005a6:	6a1b      	ldr	r3, [r3, #32]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <UARTInit+0x74>)
 80005aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80005ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7U << 12);	//AF07
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <UARTInit+0x74>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	4a0b      	ldr	r2, [pc, #44]	@ (80005e4 <UARTInit+0x74>)
 80005b6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80005ba:	6213      	str	r3, [r2, #32]

	USART2->BRR = (104U << 4) | (3U << 0); // USARTDIV = 9600
 80005bc:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <UARTInit+0x78>)
 80005be:	f240 6283 	movw	r2, #1667	@ 0x683
 80005c2:	609a      	str	r2, [r3, #8]

	USART2->CR1 = (1U << 3) | (1U << 2);	// TE and RE
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <UARTInit+0x78>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (1U << 13);	// USARTEN
 80005ca:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <UARTInit+0x78>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <UARTInit+0x78>)
 80005d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d4:	60d3      	str	r3, [r2, #12]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40004400 	.word	0x40004400

080005ec <UARTTransmit>:

void UARTTransmit(uint8_t a_data) {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	while (!((1U << 7) & USART2->SR))
 80005f6:	bf00      	nop
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <UARTTransmit+0x3c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f9      	beq.n	80005f8 <UARTTransmit+0xc>
		;	//TXE

	USART2->DR = a_data;
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <UARTTransmit+0x3c>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	6053      	str	r3, [r2, #4]

	while (!((1U << 6) & USART2->SR))
 800060a:	bf00      	nop
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <UARTTransmit+0x3c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f9      	beq.n	800060c <UARTTransmit+0x20>
		;	//TC
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40004400 	.word	0x40004400

0800062c <UARTReceive>:

uint8_t UARTReceive(void) {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	while (!(USART2->SR & (1U << 5)))
 8000630:	bf00      	nop
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <UARTReceive+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f9      	beq.n	8000632 <UARTReceive+0x6>
		;	//RXNE

	return (USART2->DR);
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <UARTReceive+0x24>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	b2db      	uxtb	r3, r3
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40004400 	.word	0x40004400

08000654 <_write>:

int _write(int file, char *ptr, int len) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	e009      	b.n	800067a <_write+0x26>
		UARTTransmit((uint8_t) ptr[i]); // Transmit each character
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffbc 	bl	80005ec <UARTTransmit>
	for (int i = 0; i < len; i++) {
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	3301      	adds	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	dbf1      	blt.n	8000666 <_write+0x12>
	}
	return len; // Return the number of bytes written
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_read>:

int _read(int file, char *ptr, int len) {
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e01d      	b.n	80006da <_read+0x4e>
		ptr[i] = UARTReceive(); // Receive each character
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	18d4      	adds	r4, r2, r3
 80006a4:	f7ff ffc2 	bl	800062c <UARTReceive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	7023      	strb	r3, [r4, #0]
		if (ptr[i] == '\r' || ptr[i] == '\n') { // Check for Enter key
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b0d      	cmp	r3, #13
 80006b6:	d005      	beq.n	80006c4 <_read+0x38>
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d107      	bne.n	80006d4 <_read+0x48>
			ptr[i] = '\n'; // Convert carriage return to newline (standard behavior)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	220a      	movs	r2, #10
 80006cc:	701a      	strb	r2, [r3, #0]
			return i + 1;  // Return the number of characters read
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	e007      	b.n	80006e4 <_read+0x58>
	for (int i = 0; i < len; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbdd      	blt.n	800069e <_read+0x12>
		}
	}
	return len;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	371c      	adds	r7, #28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f0:	f000 f978 	bl	80009e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f4:	f000 f812 	bl	800071c <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	UARTInit();
 80006f8:	f7ff ff3a 	bl	8000570 <UARTInit>

		/* USER CODE BEGIN 3 */
//		rxData = UARTReceive();
//		HAL_Delay(10);
//		UARTTransmit(rxData);
		scanf("%99s", buffer); // Read input into the buffer
 80006fc:	4904      	ldr	r1, [pc, #16]	@ (8000710 <main+0x24>)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <main+0x28>)
 8000700:	f000 ffc0 	bl	8001684 <iscanf>
		printf("You typed: %s\r\n", buffer); // Echo back the input
 8000704:	4902      	ldr	r1, [pc, #8]	@ (8000710 <main+0x24>)
 8000706:	4804      	ldr	r0, [pc, #16]	@ (8000718 <main+0x2c>)
 8000708:	f000 ffaa 	bl	8001660 <iprintf>
		scanf("%99s", buffer); // Read input into the buffer
 800070c:	bf00      	nop
 800070e:	e7f5      	b.n	80006fc <main+0x10>
 8000710:	20000084 	.word	0x20000084
 8000714:	08002ebc 	.word	0x08002ebc
 8000718:	08002ec4 	.word	0x08002ec4

0800071c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ffff 	bl	800172e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <SystemClock_Config+0xb8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a22      	ldr	r2, [pc, #136]	@ (80007d4 <SystemClock_Config+0xb8>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <SystemClock_Config+0xb8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <SystemClock_Config+0xbc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000768:	4a1b      	ldr	r2, [pc, #108]	@ (80007d8 <SystemClock_Config+0xbc>)
 800076a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <SystemClock_Config+0xbc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000788:	2300      	movs	r3, #0
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fa7f 	bl	8000c94 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x84>
		Error_Handler();
 800079c:	f000 f81e 	bl	80007dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fce2 	bl	8001184 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xae>
		Error_Handler();
 80007c6:	f000 f809 	bl	80007dc <Error_Handler>
	}
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <MemManage_Handler+0x4>

08000850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088e:	f000 f8fb 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008be:	605a      	str	r2, [r3, #4]
  return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <_isatty>:

int _isatty(int file)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f000 ff4c 	bl	80017cc <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20010000 	.word	0x20010000
 8000960:	00000400 	.word	0x00000400
 8000964:	200000e8 	.word	0x200000e8
 8000968:	20000240 	.word	0x20000240

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	@ (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000994:	f7ff ffea 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	@ (80009dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f000 ff0b 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c2:	f7ff fe93 	bl	80006ec <main>
  bx  lr    
 80009c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009d4:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 80009d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009dc:	2000023c 	.word	0x2000023c

080009e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <HAL_Init+0x40>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_Init+0x40>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <HAL_Init+0x40>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f90d 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fee6 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f917 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f8ed 	bl	8000c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200000ec 	.word	0x200000ec

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000ec 	.word	0x200000ec

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	@ (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	@ (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	@ 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff47 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c54:	f7ff ff5c 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	6978      	ldr	r0, [r7, #20]
 8000c60:	f7ff ff8e 	bl	8000b80 <NVIC_EncodePriority>
 8000c64:	4602      	mov	r2, r0
 8000c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffb0 	bl	8000be8 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e267      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d075      	beq.n	8000d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cb2:	4b88      	ldr	r3, [pc, #544]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cbe:	4b85      	ldr	r3, [pc, #532]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d112      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cca:	4b82      	ldr	r3, [pc, #520]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d05b      	beq.n	8000d9c <HAL_RCC_OscConfig+0x108>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d157      	bne.n	8000d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e242      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf8:	d106      	bne.n	8000d08 <HAL_RCC_OscConfig+0x74>
 8000cfa:	4b76      	ldr	r3, [pc, #472]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a75      	ldr	r2, [pc, #468]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01d      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b70      	ldr	r3, [pc, #448]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6f      	ldr	r2, [pc, #444]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a6c      	ldr	r2, [pc, #432]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0xb0>
 8000d2c:	4b69      	ldr	r3, [pc, #420]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a68      	ldr	r2, [pc, #416]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b66      	ldr	r3, [pc, #408]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a65      	ldr	r2, [pc, #404]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4c:	f7ff feb0 	bl	8000ab0 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d54:	f7ff feac 	bl	8000ab0 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b64      	cmp	r3, #100	@ 0x64
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e207      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0xc0>
 8000d72:	e014      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fe9c 	bl	8000ab0 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fe98 	bl	8000ab0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	@ 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1f3      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0xe8>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d063      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000daa:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00b      	beq.n	8000dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db6:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000dbe:	2b08      	cmp	r3, #8
 8000dc0:	d11c      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	4b41      	ldr	r3, [pc, #260]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d001      	beq.n	8000de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e1c7      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	4937      	ldr	r1, [pc, #220]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfa:	e03a      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d020      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e04:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fe51 	bl	8000ab0 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e12:	f7ff fe4d 	bl	8000ab0 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1a8      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4925      	ldr	r1, [pc, #148]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
 8000e44:	e015      	b.n	8000e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <HAL_RCC_OscConfig+0x244>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fe30 	bl	8000ab0 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fe2c 	bl	8000ab0 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e187      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d036      	beq.n	8000eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_RCC_OscConfig+0x248>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8c:	f7ff fe10 	bl	8000ab0 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e94:	f7ff fe0c 	bl	8000ab0 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e167      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_RCC_OscConfig+0x240>)
 8000ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0x200>
 8000eb2:	e01b      	b.n	8000eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_RCC_OscConfig+0x248>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fdf9 	bl	8000ab0 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	e00e      	b.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fdf5 	bl	8000ab0 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d907      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e150      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	42470000 	.word	0x42470000
 8000edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee0:	4b88      	ldr	r3, [pc, #544]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ea      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8097 	beq.w	8001028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b81      	ldr	r3, [pc, #516]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10f      	bne.n	8000f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a7c      	ldr	r2, [pc, #496]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2a:	4b77      	ldr	r3, [pc, #476]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d118      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f36:	4b74      	ldr	r3, [pc, #464]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fdb5 	bl	8000ab0 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4a:	f7ff fdb1 	bl	8000ab0 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e10c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001108 <HAL_RCC_OscConfig+0x474>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d106      	bne.n	8000f7e <HAL_RCC_OscConfig+0x2ea>
 8000f70:	4b64      	ldr	r3, [pc, #400]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f74:	4a63      	ldr	r2, [pc, #396]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f7c:	e01c      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x30c>
 8000f86:	4b5f      	ldr	r3, [pc, #380]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f92:	4b5c      	ldr	r3, [pc, #368]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f96:	4a5b      	ldr	r2, [pc, #364]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0x324>
 8000fa0:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa4:	4a57      	ldr	r2, [pc, #348]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fac:	4b55      	ldr	r3, [pc, #340]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb0:	4a54      	ldr	r2, [pc, #336]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 0304 	bic.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fd76 	bl	8000ab0 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fd72 	bl	8000ab0 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e0cb      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fde:	4b49      	ldr	r3, [pc, #292]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8000fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0ee      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fd60 	bl	8000ab0 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fd5c 	bl	8000ab0 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e0b5      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100a:	4b3e      	ldr	r3, [pc, #248]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001016:	7dfb      	ldrb	r3, [r7, #23]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101c:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a38      	ldr	r2, [pc, #224]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a1 	beq.w	8001174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001032:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d05c      	beq.n	80010f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d141      	bne.n	80010ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd30 	bl	8000ab0 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fd2c 	bl	8000ab0 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e087      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	3b01      	subs	r3, #1
 800108c:	041b      	lsls	r3, r3, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	061b      	lsls	r3, r3, #24
 8001096:	491b      	ldr	r1, [pc, #108]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a2:	f7ff fd05 	bl	8000ab0 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010aa:	f7ff fd01 	bl	8000ab0 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e05c      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x416>
 80010c8:	e054      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_RCC_OscConfig+0x478>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcee 	bl	8000ab0 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fcea 	bl	8000ab0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e045      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_RCC_OscConfig+0x470>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
 80010f6:	e03d      	b.n	8001174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e038      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000
 800110c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_RCC_OscConfig+0x4ec>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d028      	beq.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001128:	429a      	cmp	r2, r3
 800112a:	d121      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	429a      	cmp	r2, r3
 8001138:	d11a      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001148:	4293      	cmp	r3, r2
 800114a:	d111      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d107      	bne.n	8001170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fc1c 	bl	8000ab0 <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fc18 	bl	8000ab0 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f821 	bl	8001350 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	@ (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb7c 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	08002ee0 	.word	0x08002ee0
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001354:	b090      	sub	sp, #64	@ 0x40
 8001356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001368:	4b59      	ldr	r3, [pc, #356]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b08      	cmp	r3, #8
 8001372:	d00d      	beq.n	8001390 <HAL_RCC_GetSysClockFreq+0x40>
 8001374:	2b08      	cmp	r3, #8
 8001376:	f200 80a1 	bhi.w	80014bc <HAL_RCC_GetSysClockFreq+0x16c>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x34>
 800137e:	2b04      	cmp	r3, #4
 8001380:	d003      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x3a>
 8001382:	e09b      	b.n	80014bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001388:	e09b      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800138a:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800138e:	e098      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001390:	4b4f      	ldr	r3, [pc, #316]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800139a:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d028      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a6:	4b4a      	ldr	r3, [pc, #296]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	099b      	lsrs	r3, r3, #6
 80013ac:	2200      	movs	r2, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013b8:	2100      	movs	r1, #0
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013bc:	fb03 f201 	mul.w	r2, r3, r1
 80013c0:	2300      	movs	r3, #0
 80013c2:	fb00 f303 	mul.w	r3, r0, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	4a43      	ldr	r2, [pc, #268]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80013ca:	fba0 1202 	umull	r1, r2, r0, r2
 80013ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013d0:	460a      	mov	r2, r1
 80013d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80013d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d6:	4413      	add	r3, r2
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013dc:	2200      	movs	r2, #0
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	61fa      	str	r2, [r7, #28]
 80013e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013ea:	f7fe ff49 	bl	8000280 <__aeabi_uldivmod>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4613      	mov	r3, r2
 80013f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013f6:	e053      	b.n	80014a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f8:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	2200      	movs	r2, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	617a      	str	r2, [r7, #20]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800140a:	f04f 0b00 	mov.w	fp, #0
 800140e:	4652      	mov	r2, sl
 8001410:	465b      	mov	r3, fp
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	0159      	lsls	r1, r3, #5
 800141c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001420:	0150      	lsls	r0, r2, #5
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ebb2 080a 	subs.w	r8, r2, sl
 800142a:	eb63 090b 	sbc.w	r9, r3, fp
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800143a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800143e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001442:	ebb2 0408 	subs.w	r4, r2, r8
 8001446:	eb63 0509 	sbc.w	r5, r3, r9
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	00eb      	lsls	r3, r5, #3
 8001454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001458:	00e2      	lsls	r2, r4, #3
 800145a:	4614      	mov	r4, r2
 800145c:	461d      	mov	r5, r3
 800145e:	eb14 030a 	adds.w	r3, r4, sl
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	eb45 030b 	adc.w	r3, r5, fp
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001476:	4629      	mov	r1, r5
 8001478:	028b      	lsls	r3, r1, #10
 800147a:	4621      	mov	r1, r4
 800147c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001480:	4621      	mov	r1, r4
 8001482:	028a      	lsls	r2, r1, #10
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800148a:	2200      	movs	r2, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001494:	f7fe fef4 	bl	8000280 <__aeabi_uldivmod>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4613      	mov	r3, r2
 800149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	3301      	adds	r3, #1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80014b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014ba:	e002      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80014be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3740      	adds	r7, #64	@ 0x40
 80014c8:	46bd      	mov	sp, r7
 80014ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	00f42400 	.word	0x00f42400
 80014d8:	017d7840 	.word	0x017d7840

080014dc <std>:
 80014dc:	2300      	movs	r3, #0
 80014de:	b510      	push	{r4, lr}
 80014e0:	4604      	mov	r4, r0
 80014e2:	e9c0 3300 	strd	r3, r3, [r0]
 80014e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014ea:	6083      	str	r3, [r0, #8]
 80014ec:	8181      	strh	r1, [r0, #12]
 80014ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80014f0:	81c2      	strh	r2, [r0, #14]
 80014f2:	6183      	str	r3, [r0, #24]
 80014f4:	4619      	mov	r1, r3
 80014f6:	2208      	movs	r2, #8
 80014f8:	305c      	adds	r0, #92	@ 0x5c
 80014fa:	f000 f918 	bl	800172e <memset>
 80014fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <std+0x58>)
 8001500:	6263      	str	r3, [r4, #36]	@ 0x24
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <std+0x5c>)
 8001504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <std+0x60>)
 8001508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <std+0x64>)
 800150c:	6323      	str	r3, [r4, #48]	@ 0x30
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <std+0x68>)
 8001510:	6224      	str	r4, [r4, #32]
 8001512:	429c      	cmp	r4, r3
 8001514:	d006      	beq.n	8001524 <std+0x48>
 8001516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800151a:	4294      	cmp	r4, r2
 800151c:	d002      	beq.n	8001524 <std+0x48>
 800151e:	33d0      	adds	r3, #208	@ 0xd0
 8001520:	429c      	cmp	r4, r3
 8001522:	d105      	bne.n	8001530 <std+0x54>
 8001524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800152c:	f000 b978 	b.w	8001820 <__retarget_lock_init_recursive>
 8001530:	bd10      	pop	{r4, pc}
 8001532:	bf00      	nop
 8001534:	080016a9 	.word	0x080016a9
 8001538:	080016cb 	.word	0x080016cb
 800153c:	08001703 	.word	0x08001703
 8001540:	08001727 	.word	0x08001727
 8001544:	200000f0 	.word	0x200000f0

08001548 <stdio_exit_handler>:
 8001548:	4a02      	ldr	r2, [pc, #8]	@ (8001554 <stdio_exit_handler+0xc>)
 800154a:	4903      	ldr	r1, [pc, #12]	@ (8001558 <stdio_exit_handler+0x10>)
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <stdio_exit_handler+0x14>)
 800154e:	f000 b869 	b.w	8001624 <_fwalk_sglue>
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c
 8001558:	080026bd 	.word	0x080026bd
 800155c:	2000001c 	.word	0x2000001c

08001560 <cleanup_stdio>:
 8001560:	6841      	ldr	r1, [r0, #4]
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <cleanup_stdio+0x34>)
 8001564:	4299      	cmp	r1, r3
 8001566:	b510      	push	{r4, lr}
 8001568:	4604      	mov	r4, r0
 800156a:	d001      	beq.n	8001570 <cleanup_stdio+0x10>
 800156c:	f001 f8a6 	bl	80026bc <_fflush_r>
 8001570:	68a1      	ldr	r1, [r4, #8]
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <cleanup_stdio+0x38>)
 8001574:	4299      	cmp	r1, r3
 8001576:	d002      	beq.n	800157e <cleanup_stdio+0x1e>
 8001578:	4620      	mov	r0, r4
 800157a:	f001 f89f 	bl	80026bc <_fflush_r>
 800157e:	68e1      	ldr	r1, [r4, #12]
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <cleanup_stdio+0x3c>)
 8001582:	4299      	cmp	r1, r3
 8001584:	d004      	beq.n	8001590 <cleanup_stdio+0x30>
 8001586:	4620      	mov	r0, r4
 8001588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800158c:	f001 b896 	b.w	80026bc <_fflush_r>
 8001590:	bd10      	pop	{r4, pc}
 8001592:	bf00      	nop
 8001594:	200000f0 	.word	0x200000f0
 8001598:	20000158 	.word	0x20000158
 800159c:	200001c0 	.word	0x200001c0

080015a0 <global_stdio_init.part.0>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <global_stdio_init.part.0+0x30>)
 80015a4:	4c0b      	ldr	r4, [pc, #44]	@ (80015d4 <global_stdio_init.part.0+0x34>)
 80015a6:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <global_stdio_init.part.0+0x38>)
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	4620      	mov	r0, r4
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	f7ff ff94 	bl	80014dc <std>
 80015b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015b8:	2201      	movs	r2, #1
 80015ba:	2109      	movs	r1, #9
 80015bc:	f7ff ff8e 	bl	80014dc <std>
 80015c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015c4:	2202      	movs	r2, #2
 80015c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ca:	2112      	movs	r1, #18
 80015cc:	f7ff bf86 	b.w	80014dc <std>
 80015d0:	20000228 	.word	0x20000228
 80015d4:	200000f0 	.word	0x200000f0
 80015d8:	08001549 	.word	0x08001549

080015dc <__sfp_lock_acquire>:
 80015dc:	4801      	ldr	r0, [pc, #4]	@ (80015e4 <__sfp_lock_acquire+0x8>)
 80015de:	f000 b920 	b.w	8001822 <__retarget_lock_acquire_recursive>
 80015e2:	bf00      	nop
 80015e4:	20000231 	.word	0x20000231

080015e8 <__sfp_lock_release>:
 80015e8:	4801      	ldr	r0, [pc, #4]	@ (80015f0 <__sfp_lock_release+0x8>)
 80015ea:	f000 b91b 	b.w	8001824 <__retarget_lock_release_recursive>
 80015ee:	bf00      	nop
 80015f0:	20000231 	.word	0x20000231

080015f4 <__sinit>:
 80015f4:	b510      	push	{r4, lr}
 80015f6:	4604      	mov	r4, r0
 80015f8:	f7ff fff0 	bl	80015dc <__sfp_lock_acquire>
 80015fc:	6a23      	ldr	r3, [r4, #32]
 80015fe:	b11b      	cbz	r3, 8001608 <__sinit+0x14>
 8001600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001604:	f7ff bff0 	b.w	80015e8 <__sfp_lock_release>
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <__sinit+0x28>)
 800160a:	6223      	str	r3, [r4, #32]
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__sinit+0x2c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f5      	bne.n	8001600 <__sinit+0xc>
 8001614:	f7ff ffc4 	bl	80015a0 <global_stdio_init.part.0>
 8001618:	e7f2      	b.n	8001600 <__sinit+0xc>
 800161a:	bf00      	nop
 800161c:	08001561 	.word	0x08001561
 8001620:	20000228 	.word	0x20000228

08001624 <_fwalk_sglue>:
 8001624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001628:	4607      	mov	r7, r0
 800162a:	4688      	mov	r8, r1
 800162c:	4614      	mov	r4, r2
 800162e:	2600      	movs	r6, #0
 8001630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001634:	f1b9 0901 	subs.w	r9, r9, #1
 8001638:	d505      	bpl.n	8001646 <_fwalk_sglue+0x22>
 800163a:	6824      	ldr	r4, [r4, #0]
 800163c:	2c00      	cmp	r4, #0
 800163e:	d1f7      	bne.n	8001630 <_fwalk_sglue+0xc>
 8001640:	4630      	mov	r0, r6
 8001642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001646:	89ab      	ldrh	r3, [r5, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d907      	bls.n	800165c <_fwalk_sglue+0x38>
 800164c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001650:	3301      	adds	r3, #1
 8001652:	d003      	beq.n	800165c <_fwalk_sglue+0x38>
 8001654:	4629      	mov	r1, r5
 8001656:	4638      	mov	r0, r7
 8001658:	47c0      	blx	r8
 800165a:	4306      	orrs	r6, r0
 800165c:	3568      	adds	r5, #104	@ 0x68
 800165e:	e7e9      	b.n	8001634 <_fwalk_sglue+0x10>

08001660 <iprintf>:
 8001660:	b40f      	push	{r0, r1, r2, r3}
 8001662:	b507      	push	{r0, r1, r2, lr}
 8001664:	4906      	ldr	r1, [pc, #24]	@ (8001680 <iprintf+0x20>)
 8001666:	ab04      	add	r3, sp, #16
 8001668:	6808      	ldr	r0, [r1, #0]
 800166a:	f853 2b04 	ldr.w	r2, [r3], #4
 800166e:	6881      	ldr	r1, [r0, #8]
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	f000 f9fb 	bl	8001a6c <_vfiprintf_r>
 8001676:	b003      	add	sp, #12
 8001678:	f85d eb04 	ldr.w	lr, [sp], #4
 800167c:	b004      	add	sp, #16
 800167e:	4770      	bx	lr
 8001680:	20000018 	.word	0x20000018

08001684 <iscanf>:
 8001684:	b40f      	push	{r0, r1, r2, r3}
 8001686:	b507      	push	{r0, r1, r2, lr}
 8001688:	4906      	ldr	r1, [pc, #24]	@ (80016a4 <iscanf+0x20>)
 800168a:	ab04      	add	r3, sp, #16
 800168c:	6808      	ldr	r0, [r1, #0]
 800168e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001692:	6841      	ldr	r1, [r0, #4]
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	f000 fe2b 	bl	80022f0 <_vfiscanf_r>
 800169a:	b003      	add	sp, #12
 800169c:	f85d eb04 	ldr.w	lr, [sp], #4
 80016a0:	b004      	add	sp, #16
 80016a2:	4770      	bx	lr
 80016a4:	20000018 	.word	0x20000018

080016a8 <__sread>:
 80016a8:	b510      	push	{r4, lr}
 80016aa:	460c      	mov	r4, r1
 80016ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b0:	f000 f868 	bl	8001784 <_read_r>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bfab      	itete	ge
 80016b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80016ba:	89a3      	ldrhlt	r3, [r4, #12]
 80016bc:	181b      	addge	r3, r3, r0
 80016be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80016c2:	bfac      	ite	ge
 80016c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80016c6:	81a3      	strhlt	r3, [r4, #12]
 80016c8:	bd10      	pop	{r4, pc}

080016ca <__swrite>:
 80016ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ce:	461f      	mov	r7, r3
 80016d0:	898b      	ldrh	r3, [r1, #12]
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	4605      	mov	r5, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4616      	mov	r6, r2
 80016da:	d505      	bpl.n	80016e8 <__swrite+0x1e>
 80016dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e0:	2302      	movs	r3, #2
 80016e2:	2200      	movs	r2, #0
 80016e4:	f000 f83c 	bl	8001760 <_lseek_r>
 80016e8:	89a3      	ldrh	r3, [r4, #12]
 80016ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016f2:	81a3      	strh	r3, [r4, #12]
 80016f4:	4632      	mov	r2, r6
 80016f6:	463b      	mov	r3, r7
 80016f8:	4628      	mov	r0, r5
 80016fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016fe:	f000 b853 	b.w	80017a8 <_write_r>

08001702 <__sseek>:
 8001702:	b510      	push	{r4, lr}
 8001704:	460c      	mov	r4, r1
 8001706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170a:	f000 f829 	bl	8001760 <_lseek_r>
 800170e:	1c43      	adds	r3, r0, #1
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	bf15      	itete	ne
 8001714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800171a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800171e:	81a3      	strheq	r3, [r4, #12]
 8001720:	bf18      	it	ne
 8001722:	81a3      	strhne	r3, [r4, #12]
 8001724:	bd10      	pop	{r4, pc}

08001726 <__sclose>:
 8001726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800172a:	f000 b809 	b.w	8001740 <_close_r>

0800172e <memset>:
 800172e:	4402      	add	r2, r0
 8001730:	4603      	mov	r3, r0
 8001732:	4293      	cmp	r3, r2
 8001734:	d100      	bne.n	8001738 <memset+0xa>
 8001736:	4770      	bx	lr
 8001738:	f803 1b01 	strb.w	r1, [r3], #1
 800173c:	e7f9      	b.n	8001732 <memset+0x4>
	...

08001740 <_close_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d06      	ldr	r5, [pc, #24]	@ (800175c <_close_r+0x1c>)
 8001744:	2300      	movs	r3, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	f7ff f8a3 	bl	8000896 <_close>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d102      	bne.n	800175a <_close_r+0x1a>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	b103      	cbz	r3, 800175a <_close_r+0x1a>
 8001758:	6023      	str	r3, [r4, #0]
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	2000022c 	.word	0x2000022c

08001760 <_lseek_r>:
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4d07      	ldr	r5, [pc, #28]	@ (8001780 <_lseek_r+0x20>)
 8001764:	4604      	mov	r4, r0
 8001766:	4608      	mov	r0, r1
 8001768:	4611      	mov	r1, r2
 800176a:	2200      	movs	r2, #0
 800176c:	602a      	str	r2, [r5, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	f7ff f8b8 	bl	80008e4 <_lseek>
 8001774:	1c43      	adds	r3, r0, #1
 8001776:	d102      	bne.n	800177e <_lseek_r+0x1e>
 8001778:	682b      	ldr	r3, [r5, #0]
 800177a:	b103      	cbz	r3, 800177e <_lseek_r+0x1e>
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	2000022c 	.word	0x2000022c

08001784 <_read_r>:
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	4d07      	ldr	r5, [pc, #28]	@ (80017a4 <_read_r+0x20>)
 8001788:	4604      	mov	r4, r0
 800178a:	4608      	mov	r0, r1
 800178c:	4611      	mov	r1, r2
 800178e:	2200      	movs	r2, #0
 8001790:	602a      	str	r2, [r5, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	f7fe ff7a 	bl	800068c <_read>
 8001798:	1c43      	adds	r3, r0, #1
 800179a:	d102      	bne.n	80017a2 <_read_r+0x1e>
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	b103      	cbz	r3, 80017a2 <_read_r+0x1e>
 80017a0:	6023      	str	r3, [r4, #0]
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
 80017a4:	2000022c 	.word	0x2000022c

080017a8 <_write_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d07      	ldr	r5, [pc, #28]	@ (80017c8 <_write_r+0x20>)
 80017ac:	4604      	mov	r4, r0
 80017ae:	4608      	mov	r0, r1
 80017b0:	4611      	mov	r1, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	602a      	str	r2, [r5, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f7fe ff4c 	bl	8000654 <_write>
 80017bc:	1c43      	adds	r3, r0, #1
 80017be:	d102      	bne.n	80017c6 <_write_r+0x1e>
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	b103      	cbz	r3, 80017c6 <_write_r+0x1e>
 80017c4:	6023      	str	r3, [r4, #0]
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
 80017c8:	2000022c 	.word	0x2000022c

080017cc <__errno>:
 80017cc:	4b01      	ldr	r3, [pc, #4]	@ (80017d4 <__errno+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000018 	.word	0x20000018

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4d0d      	ldr	r5, [pc, #52]	@ (8001810 <__libc_init_array+0x38>)
 80017dc:	4c0d      	ldr	r4, [pc, #52]	@ (8001814 <__libc_init_array+0x3c>)
 80017de:	1b64      	subs	r4, r4, r5
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	2600      	movs	r6, #0
 80017e4:	42a6      	cmp	r6, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	4d0b      	ldr	r5, [pc, #44]	@ (8001818 <__libc_init_array+0x40>)
 80017ea:	4c0c      	ldr	r4, [pc, #48]	@ (800181c <__libc_init_array+0x44>)
 80017ec:	f001 fb5a 	bl	8002ea4 <_init>
 80017f0:	1b64      	subs	r4, r4, r5
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	2600      	movs	r6, #0
 80017f6:	42a6      	cmp	r6, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001800:	4798      	blx	r3
 8001802:	3601      	adds	r6, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	f855 3b04 	ldr.w	r3, [r5], #4
 800180a:	4798      	blx	r3
 800180c:	3601      	adds	r6, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	08003048 	.word	0x08003048
 8001814:	08003048 	.word	0x08003048
 8001818:	08003048 	.word	0x08003048
 800181c:	0800304c 	.word	0x0800304c

08001820 <__retarget_lock_init_recursive>:
 8001820:	4770      	bx	lr

08001822 <__retarget_lock_acquire_recursive>:
 8001822:	4770      	bx	lr

08001824 <__retarget_lock_release_recursive>:
 8001824:	4770      	bx	lr
	...

08001828 <_free_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4605      	mov	r5, r0
 800182c:	2900      	cmp	r1, #0
 800182e:	d041      	beq.n	80018b4 <_free_r+0x8c>
 8001830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001834:	1f0c      	subs	r4, r1, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfb8      	it	lt
 800183a:	18e4      	addlt	r4, r4, r3
 800183c:	f000 f8e0 	bl	8001a00 <__malloc_lock>
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <_free_r+0x90>)
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	b933      	cbnz	r3, 8001854 <_free_r+0x2c>
 8001846:	6063      	str	r3, [r4, #4]
 8001848:	6014      	str	r4, [r2, #0]
 800184a:	4628      	mov	r0, r5
 800184c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001850:	f000 b8dc 	b.w	8001a0c <__malloc_unlock>
 8001854:	42a3      	cmp	r3, r4
 8001856:	d908      	bls.n	800186a <_free_r+0x42>
 8001858:	6820      	ldr	r0, [r4, #0]
 800185a:	1821      	adds	r1, r4, r0
 800185c:	428b      	cmp	r3, r1
 800185e:	bf01      	itttt	eq
 8001860:	6819      	ldreq	r1, [r3, #0]
 8001862:	685b      	ldreq	r3, [r3, #4]
 8001864:	1809      	addeq	r1, r1, r0
 8001866:	6021      	streq	r1, [r4, #0]
 8001868:	e7ed      	b.n	8001846 <_free_r+0x1e>
 800186a:	461a      	mov	r2, r3
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b10b      	cbz	r3, 8001874 <_free_r+0x4c>
 8001870:	42a3      	cmp	r3, r4
 8001872:	d9fa      	bls.n	800186a <_free_r+0x42>
 8001874:	6811      	ldr	r1, [r2, #0]
 8001876:	1850      	adds	r0, r2, r1
 8001878:	42a0      	cmp	r0, r4
 800187a:	d10b      	bne.n	8001894 <_free_r+0x6c>
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	4401      	add	r1, r0
 8001880:	1850      	adds	r0, r2, r1
 8001882:	4283      	cmp	r3, r0
 8001884:	6011      	str	r1, [r2, #0]
 8001886:	d1e0      	bne.n	800184a <_free_r+0x22>
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	6053      	str	r3, [r2, #4]
 800188e:	4408      	add	r0, r1
 8001890:	6010      	str	r0, [r2, #0]
 8001892:	e7da      	b.n	800184a <_free_r+0x22>
 8001894:	d902      	bls.n	800189c <_free_r+0x74>
 8001896:	230c      	movs	r3, #12
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	e7d6      	b.n	800184a <_free_r+0x22>
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	1821      	adds	r1, r4, r0
 80018a0:	428b      	cmp	r3, r1
 80018a2:	bf04      	itt	eq
 80018a4:	6819      	ldreq	r1, [r3, #0]
 80018a6:	685b      	ldreq	r3, [r3, #4]
 80018a8:	6063      	str	r3, [r4, #4]
 80018aa:	bf04      	itt	eq
 80018ac:	1809      	addeq	r1, r1, r0
 80018ae:	6021      	streq	r1, [r4, #0]
 80018b0:	6054      	str	r4, [r2, #4]
 80018b2:	e7ca      	b.n	800184a <_free_r+0x22>
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
 80018b6:	bf00      	nop
 80018b8:	20000238 	.word	0x20000238

080018bc <sbrk_aligned>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4e0f      	ldr	r6, [pc, #60]	@ (80018fc <sbrk_aligned+0x40>)
 80018c0:	460c      	mov	r4, r1
 80018c2:	6831      	ldr	r1, [r6, #0]
 80018c4:	4605      	mov	r5, r0
 80018c6:	b911      	cbnz	r1, 80018ce <sbrk_aligned+0x12>
 80018c8:	f001 f928 	bl	8002b1c <_sbrk_r>
 80018cc:	6030      	str	r0, [r6, #0]
 80018ce:	4621      	mov	r1, r4
 80018d0:	4628      	mov	r0, r5
 80018d2:	f001 f923 	bl	8002b1c <_sbrk_r>
 80018d6:	1c43      	adds	r3, r0, #1
 80018d8:	d103      	bne.n	80018e2 <sbrk_aligned+0x26>
 80018da:	f04f 34ff 	mov.w	r4, #4294967295
 80018de:	4620      	mov	r0, r4
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
 80018e2:	1cc4      	adds	r4, r0, #3
 80018e4:	f024 0403 	bic.w	r4, r4, #3
 80018e8:	42a0      	cmp	r0, r4
 80018ea:	d0f8      	beq.n	80018de <sbrk_aligned+0x22>
 80018ec:	1a21      	subs	r1, r4, r0
 80018ee:	4628      	mov	r0, r5
 80018f0:	f001 f914 	bl	8002b1c <_sbrk_r>
 80018f4:	3001      	adds	r0, #1
 80018f6:	d1f2      	bne.n	80018de <sbrk_aligned+0x22>
 80018f8:	e7ef      	b.n	80018da <sbrk_aligned+0x1e>
 80018fa:	bf00      	nop
 80018fc:	20000234 	.word	0x20000234

08001900 <_malloc_r>:
 8001900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001904:	1ccd      	adds	r5, r1, #3
 8001906:	f025 0503 	bic.w	r5, r5, #3
 800190a:	3508      	adds	r5, #8
 800190c:	2d0c      	cmp	r5, #12
 800190e:	bf38      	it	cc
 8001910:	250c      	movcc	r5, #12
 8001912:	2d00      	cmp	r5, #0
 8001914:	4606      	mov	r6, r0
 8001916:	db01      	blt.n	800191c <_malloc_r+0x1c>
 8001918:	42a9      	cmp	r1, r5
 800191a:	d904      	bls.n	8001926 <_malloc_r+0x26>
 800191c:	230c      	movs	r3, #12
 800191e:	6033      	str	r3, [r6, #0]
 8001920:	2000      	movs	r0, #0
 8001922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019fc <_malloc_r+0xfc>
 800192a:	f000 f869 	bl	8001a00 <__malloc_lock>
 800192e:	f8d8 3000 	ldr.w	r3, [r8]
 8001932:	461c      	mov	r4, r3
 8001934:	bb44      	cbnz	r4, 8001988 <_malloc_r+0x88>
 8001936:	4629      	mov	r1, r5
 8001938:	4630      	mov	r0, r6
 800193a:	f7ff ffbf 	bl	80018bc <sbrk_aligned>
 800193e:	1c43      	adds	r3, r0, #1
 8001940:	4604      	mov	r4, r0
 8001942:	d158      	bne.n	80019f6 <_malloc_r+0xf6>
 8001944:	f8d8 4000 	ldr.w	r4, [r8]
 8001948:	4627      	mov	r7, r4
 800194a:	2f00      	cmp	r7, #0
 800194c:	d143      	bne.n	80019d6 <_malloc_r+0xd6>
 800194e:	2c00      	cmp	r4, #0
 8001950:	d04b      	beq.n	80019ea <_malloc_r+0xea>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	4639      	mov	r1, r7
 8001956:	4630      	mov	r0, r6
 8001958:	eb04 0903 	add.w	r9, r4, r3
 800195c:	f001 f8de 	bl	8002b1c <_sbrk_r>
 8001960:	4581      	cmp	r9, r0
 8001962:	d142      	bne.n	80019ea <_malloc_r+0xea>
 8001964:	6821      	ldr	r1, [r4, #0]
 8001966:	1a6d      	subs	r5, r5, r1
 8001968:	4629      	mov	r1, r5
 800196a:	4630      	mov	r0, r6
 800196c:	f7ff ffa6 	bl	80018bc <sbrk_aligned>
 8001970:	3001      	adds	r0, #1
 8001972:	d03a      	beq.n	80019ea <_malloc_r+0xea>
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	442b      	add	r3, r5
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	f8d8 3000 	ldr.w	r3, [r8]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	bb62      	cbnz	r2, 80019dc <_malloc_r+0xdc>
 8001982:	f8c8 7000 	str.w	r7, [r8]
 8001986:	e00f      	b.n	80019a8 <_malloc_r+0xa8>
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	1b52      	subs	r2, r2, r5
 800198c:	d420      	bmi.n	80019d0 <_malloc_r+0xd0>
 800198e:	2a0b      	cmp	r2, #11
 8001990:	d917      	bls.n	80019c2 <_malloc_r+0xc2>
 8001992:	1961      	adds	r1, r4, r5
 8001994:	42a3      	cmp	r3, r4
 8001996:	6025      	str	r5, [r4, #0]
 8001998:	bf18      	it	ne
 800199a:	6059      	strne	r1, [r3, #4]
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	bf08      	it	eq
 80019a0:	f8c8 1000 	streq.w	r1, [r8]
 80019a4:	5162      	str	r2, [r4, r5]
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	4630      	mov	r0, r6
 80019aa:	f000 f82f 	bl	8001a0c <__malloc_unlock>
 80019ae:	f104 000b 	add.w	r0, r4, #11
 80019b2:	1d23      	adds	r3, r4, #4
 80019b4:	f020 0007 	bic.w	r0, r0, #7
 80019b8:	1ac2      	subs	r2, r0, r3
 80019ba:	bf1c      	itt	ne
 80019bc:	1a1b      	subne	r3, r3, r0
 80019be:	50a3      	strne	r3, [r4, r2]
 80019c0:	e7af      	b.n	8001922 <_malloc_r+0x22>
 80019c2:	6862      	ldr	r2, [r4, #4]
 80019c4:	42a3      	cmp	r3, r4
 80019c6:	bf0c      	ite	eq
 80019c8:	f8c8 2000 	streq.w	r2, [r8]
 80019cc:	605a      	strne	r2, [r3, #4]
 80019ce:	e7eb      	b.n	80019a8 <_malloc_r+0xa8>
 80019d0:	4623      	mov	r3, r4
 80019d2:	6864      	ldr	r4, [r4, #4]
 80019d4:	e7ae      	b.n	8001934 <_malloc_r+0x34>
 80019d6:	463c      	mov	r4, r7
 80019d8:	687f      	ldr	r7, [r7, #4]
 80019da:	e7b6      	b.n	800194a <_malloc_r+0x4a>
 80019dc:	461a      	mov	r2, r3
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	42a3      	cmp	r3, r4
 80019e2:	d1fb      	bne.n	80019dc <_malloc_r+0xdc>
 80019e4:	2300      	movs	r3, #0
 80019e6:	6053      	str	r3, [r2, #4]
 80019e8:	e7de      	b.n	80019a8 <_malloc_r+0xa8>
 80019ea:	230c      	movs	r3, #12
 80019ec:	6033      	str	r3, [r6, #0]
 80019ee:	4630      	mov	r0, r6
 80019f0:	f000 f80c 	bl	8001a0c <__malloc_unlock>
 80019f4:	e794      	b.n	8001920 <_malloc_r+0x20>
 80019f6:	6005      	str	r5, [r0, #0]
 80019f8:	e7d6      	b.n	80019a8 <_malloc_r+0xa8>
 80019fa:	bf00      	nop
 80019fc:	20000238 	.word	0x20000238

08001a00 <__malloc_lock>:
 8001a00:	4801      	ldr	r0, [pc, #4]	@ (8001a08 <__malloc_lock+0x8>)
 8001a02:	f7ff bf0e 	b.w	8001822 <__retarget_lock_acquire_recursive>
 8001a06:	bf00      	nop
 8001a08:	20000230 	.word	0x20000230

08001a0c <__malloc_unlock>:
 8001a0c:	4801      	ldr	r0, [pc, #4]	@ (8001a14 <__malloc_unlock+0x8>)
 8001a0e:	f7ff bf09 	b.w	8001824 <__retarget_lock_release_recursive>
 8001a12:	bf00      	nop
 8001a14:	20000230 	.word	0x20000230

08001a18 <__sfputc_r>:
 8001a18:	6893      	ldr	r3, [r2, #8]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	b410      	push	{r4}
 8001a20:	6093      	str	r3, [r2, #8]
 8001a22:	da08      	bge.n	8001a36 <__sfputc_r+0x1e>
 8001a24:	6994      	ldr	r4, [r2, #24]
 8001a26:	42a3      	cmp	r3, r4
 8001a28:	db01      	blt.n	8001a2e <__sfputc_r+0x16>
 8001a2a:	290a      	cmp	r1, #10
 8001a2c:	d103      	bne.n	8001a36 <__sfputc_r+0x1e>
 8001a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a32:	f000 bfdf 	b.w	80029f4 <__swbuf_r>
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	1c58      	adds	r0, r3, #1
 8001a3a:	6010      	str	r0, [r2, #0]
 8001a3c:	7019      	strb	r1, [r3, #0]
 8001a3e:	4608      	mov	r0, r1
 8001a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <__sfputs_r>:
 8001a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a48:	4606      	mov	r6, r0
 8001a4a:	460f      	mov	r7, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	18d5      	adds	r5, r2, r3
 8001a50:	42ac      	cmp	r4, r5
 8001a52:	d101      	bne.n	8001a58 <__sfputs_r+0x12>
 8001a54:	2000      	movs	r0, #0
 8001a56:	e007      	b.n	8001a68 <__sfputs_r+0x22>
 8001a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a5c:	463a      	mov	r2, r7
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff ffda 	bl	8001a18 <__sfputc_r>
 8001a64:	1c43      	adds	r3, r0, #1
 8001a66:	d1f3      	bne.n	8001a50 <__sfputs_r+0xa>
 8001a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a6c <_vfiprintf_r>:
 8001a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a70:	460d      	mov	r5, r1
 8001a72:	b09d      	sub	sp, #116	@ 0x74
 8001a74:	4614      	mov	r4, r2
 8001a76:	4698      	mov	r8, r3
 8001a78:	4606      	mov	r6, r0
 8001a7a:	b118      	cbz	r0, 8001a84 <_vfiprintf_r+0x18>
 8001a7c:	6a03      	ldr	r3, [r0, #32]
 8001a7e:	b90b      	cbnz	r3, 8001a84 <_vfiprintf_r+0x18>
 8001a80:	f7ff fdb8 	bl	80015f4 <__sinit>
 8001a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a86:	07d9      	lsls	r1, r3, #31
 8001a88:	d405      	bmi.n	8001a96 <_vfiprintf_r+0x2a>
 8001a8a:	89ab      	ldrh	r3, [r5, #12]
 8001a8c:	059a      	lsls	r2, r3, #22
 8001a8e:	d402      	bmi.n	8001a96 <_vfiprintf_r+0x2a>
 8001a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a92:	f7ff fec6 	bl	8001822 <__retarget_lock_acquire_recursive>
 8001a96:	89ab      	ldrh	r3, [r5, #12]
 8001a98:	071b      	lsls	r3, r3, #28
 8001a9a:	d501      	bpl.n	8001aa0 <_vfiprintf_r+0x34>
 8001a9c:	692b      	ldr	r3, [r5, #16]
 8001a9e:	b99b      	cbnz	r3, 8001ac8 <_vfiprintf_r+0x5c>
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f000 ffe4 	bl	8002a70 <__swsetup_r>
 8001aa8:	b170      	cbz	r0, 8001ac8 <_vfiprintf_r+0x5c>
 8001aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aac:	07dc      	lsls	r4, r3, #31
 8001aae:	d504      	bpl.n	8001aba <_vfiprintf_r+0x4e>
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	b01d      	add	sp, #116	@ 0x74
 8001ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aba:	89ab      	ldrh	r3, [r5, #12]
 8001abc:	0598      	lsls	r0, r3, #22
 8001abe:	d4f7      	bmi.n	8001ab0 <_vfiprintf_r+0x44>
 8001ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ac2:	f7ff feaf 	bl	8001824 <__retarget_lock_release_recursive>
 8001ac6:	e7f3      	b.n	8001ab0 <_vfiprintf_r+0x44>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8001acc:	2320      	movs	r3, #32
 8001ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ad6:	2330      	movs	r3, #48	@ 0x30
 8001ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001c88 <_vfiprintf_r+0x21c>
 8001adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ae0:	f04f 0901 	mov.w	r9, #1
 8001ae4:	4623      	mov	r3, r4
 8001ae6:	469a      	mov	sl, r3
 8001ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001aec:	b10a      	cbz	r2, 8001af2 <_vfiprintf_r+0x86>
 8001aee:	2a25      	cmp	r2, #37	@ 0x25
 8001af0:	d1f9      	bne.n	8001ae6 <_vfiprintf_r+0x7a>
 8001af2:	ebba 0b04 	subs.w	fp, sl, r4
 8001af6:	d00b      	beq.n	8001b10 <_vfiprintf_r+0xa4>
 8001af8:	465b      	mov	r3, fp
 8001afa:	4622      	mov	r2, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff ffa1 	bl	8001a46 <__sfputs_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	f000 80a7 	beq.w	8001c58 <_vfiprintf_r+0x1ec>
 8001b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b0c:	445a      	add	r2, fp
 8001b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b10:	f89a 3000 	ldrb.w	r3, [sl]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 809f 	beq.w	8001c58 <_vfiprintf_r+0x1ec>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b24:	f10a 0a01 	add.w	sl, sl, #1
 8001b28:	9304      	str	r3, [sp, #16]
 8001b2a:	9307      	str	r3, [sp, #28]
 8001b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b32:	4654      	mov	r4, sl
 8001b34:	2205      	movs	r2, #5
 8001b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b3a:	4853      	ldr	r0, [pc, #332]	@ (8001c88 <_vfiprintf_r+0x21c>)
 8001b3c:	f7fe fb50 	bl	80001e0 <memchr>
 8001b40:	9a04      	ldr	r2, [sp, #16]
 8001b42:	b9d8      	cbnz	r0, 8001b7c <_vfiprintf_r+0x110>
 8001b44:	06d1      	lsls	r1, r2, #27
 8001b46:	bf44      	itt	mi
 8001b48:	2320      	movmi	r3, #32
 8001b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b4e:	0713      	lsls	r3, r2, #28
 8001b50:	bf44      	itt	mi
 8001b52:	232b      	movmi	r3, #43	@ 0x2b
 8001b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b58:	f89a 3000 	ldrb.w	r3, [sl]
 8001b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b5e:	d015      	beq.n	8001b8c <_vfiprintf_r+0x120>
 8001b60:	9a07      	ldr	r2, [sp, #28]
 8001b62:	4654      	mov	r4, sl
 8001b64:	2000      	movs	r0, #0
 8001b66:	f04f 0c0a 	mov.w	ip, #10
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b70:	3b30      	subs	r3, #48	@ 0x30
 8001b72:	2b09      	cmp	r3, #9
 8001b74:	d94b      	bls.n	8001c0e <_vfiprintf_r+0x1a2>
 8001b76:	b1b0      	cbz	r0, 8001ba6 <_vfiprintf_r+0x13a>
 8001b78:	9207      	str	r2, [sp, #28]
 8001b7a:	e014      	b.n	8001ba6 <_vfiprintf_r+0x13a>
 8001b7c:	eba0 0308 	sub.w	r3, r0, r8
 8001b80:	fa09 f303 	lsl.w	r3, r9, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	9304      	str	r3, [sp, #16]
 8001b88:	46a2      	mov	sl, r4
 8001b8a:	e7d2      	b.n	8001b32 <_vfiprintf_r+0xc6>
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	1d19      	adds	r1, r3, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	9103      	str	r1, [sp, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bfbb      	ittet	lt
 8001b98:	425b      	neglt	r3, r3
 8001b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8001b9e:	9307      	strge	r3, [sp, #28]
 8001ba0:	9307      	strlt	r3, [sp, #28]
 8001ba2:	bfb8      	it	lt
 8001ba4:	9204      	strlt	r2, [sp, #16]
 8001ba6:	7823      	ldrb	r3, [r4, #0]
 8001ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001baa:	d10a      	bne.n	8001bc2 <_vfiprintf_r+0x156>
 8001bac:	7863      	ldrb	r3, [r4, #1]
 8001bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bb0:	d132      	bne.n	8001c18 <_vfiprintf_r+0x1ac>
 8001bb2:	9b03      	ldr	r3, [sp, #12]
 8001bb4:	1d1a      	adds	r2, r3, #4
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	9203      	str	r2, [sp, #12]
 8001bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bbe:	3402      	adds	r4, #2
 8001bc0:	9305      	str	r3, [sp, #20]
 8001bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001c98 <_vfiprintf_r+0x22c>
 8001bc6:	7821      	ldrb	r1, [r4, #0]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4650      	mov	r0, sl
 8001bcc:	f7fe fb08 	bl	80001e0 <memchr>
 8001bd0:	b138      	cbz	r0, 8001be2 <_vfiprintf_r+0x176>
 8001bd2:	9b04      	ldr	r3, [sp, #16]
 8001bd4:	eba0 000a 	sub.w	r0, r0, sl
 8001bd8:	2240      	movs	r2, #64	@ 0x40
 8001bda:	4082      	lsls	r2, r0
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	3401      	adds	r4, #1
 8001be0:	9304      	str	r3, [sp, #16]
 8001be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001be6:	4829      	ldr	r0, [pc, #164]	@ (8001c8c <_vfiprintf_r+0x220>)
 8001be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bec:	2206      	movs	r2, #6
 8001bee:	f7fe faf7 	bl	80001e0 <memchr>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d03f      	beq.n	8001c76 <_vfiprintf_r+0x20a>
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <_vfiprintf_r+0x224>)
 8001bf8:	bb1b      	cbnz	r3, 8001c42 <_vfiprintf_r+0x1d6>
 8001bfa:	9b03      	ldr	r3, [sp, #12]
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	f023 0307 	bic.w	r3, r3, #7
 8001c02:	3308      	adds	r3, #8
 8001c04:	9303      	str	r3, [sp, #12]
 8001c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c08:	443b      	add	r3, r7
 8001c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c0c:	e76a      	b.n	8001ae4 <_vfiprintf_r+0x78>
 8001c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c12:	460c      	mov	r4, r1
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7a8      	b.n	8001b6a <_vfiprintf_r+0xfe>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	3401      	adds	r4, #1
 8001c1c:	9305      	str	r3, [sp, #20]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0c0a 	mov.w	ip, #10
 8001c24:	4620      	mov	r0, r4
 8001c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c2a:	3a30      	subs	r2, #48	@ 0x30
 8001c2c:	2a09      	cmp	r2, #9
 8001c2e:	d903      	bls.n	8001c38 <_vfiprintf_r+0x1cc>
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0c6      	beq.n	8001bc2 <_vfiprintf_r+0x156>
 8001c34:	9105      	str	r1, [sp, #20]
 8001c36:	e7c4      	b.n	8001bc2 <_vfiprintf_r+0x156>
 8001c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e7f0      	b.n	8001c24 <_vfiprintf_r+0x1b8>
 8001c42:	ab03      	add	r3, sp, #12
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	462a      	mov	r2, r5
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <_vfiprintf_r+0x228>)
 8001c4a:	a904      	add	r1, sp, #16
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f3af 8000 	nop.w
 8001c52:	4607      	mov	r7, r0
 8001c54:	1c78      	adds	r0, r7, #1
 8001c56:	d1d6      	bne.n	8001c06 <_vfiprintf_r+0x19a>
 8001c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c5a:	07d9      	lsls	r1, r3, #31
 8001c5c:	d405      	bmi.n	8001c6a <_vfiprintf_r+0x1fe>
 8001c5e:	89ab      	ldrh	r3, [r5, #12]
 8001c60:	059a      	lsls	r2, r3, #22
 8001c62:	d402      	bmi.n	8001c6a <_vfiprintf_r+0x1fe>
 8001c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c66:	f7ff fddd 	bl	8001824 <__retarget_lock_release_recursive>
 8001c6a:	89ab      	ldrh	r3, [r5, #12]
 8001c6c:	065b      	lsls	r3, r3, #25
 8001c6e:	f53f af1f 	bmi.w	8001ab0 <_vfiprintf_r+0x44>
 8001c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c74:	e71e      	b.n	8001ab4 <_vfiprintf_r+0x48>
 8001c76:	ab03      	add	r3, sp, #12
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	462a      	mov	r2, r5
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <_vfiprintf_r+0x228>)
 8001c7e:	a904      	add	r1, sp, #16
 8001c80:	4630      	mov	r0, r6
 8001c82:	f000 f879 	bl	8001d78 <_printf_i>
 8001c86:	e7e4      	b.n	8001c52 <_vfiprintf_r+0x1e6>
 8001c88:	08002ef0 	.word	0x08002ef0
 8001c8c:	08002efa 	.word	0x08002efa
 8001c90:	00000000 	.word	0x00000000
 8001c94:	08001a47 	.word	0x08001a47
 8001c98:	08002ef6 	.word	0x08002ef6

08001c9c <_printf_common>:
 8001c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ca0:	4616      	mov	r6, r2
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	688a      	ldr	r2, [r1, #8]
 8001ca6:	690b      	ldr	r3, [r1, #16]
 8001ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bfb8      	it	lt
 8001cb0:	4613      	movlt	r3, r2
 8001cb2:	6033      	str	r3, [r6, #0]
 8001cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cb8:	4607      	mov	r7, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	b10a      	cbz	r2, 8001cc2 <_printf_common+0x26>
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	6033      	str	r3, [r6, #0]
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	0699      	lsls	r1, r3, #26
 8001cc6:	bf42      	ittt	mi
 8001cc8:	6833      	ldrmi	r3, [r6, #0]
 8001cca:	3302      	addmi	r3, #2
 8001ccc:	6033      	strmi	r3, [r6, #0]
 8001cce:	6825      	ldr	r5, [r4, #0]
 8001cd0:	f015 0506 	ands.w	r5, r5, #6
 8001cd4:	d106      	bne.n	8001ce4 <_printf_common+0x48>
 8001cd6:	f104 0a19 	add.w	sl, r4, #25
 8001cda:	68e3      	ldr	r3, [r4, #12]
 8001cdc:	6832      	ldr	r2, [r6, #0]
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	42ab      	cmp	r3, r5
 8001ce2:	dc26      	bgt.n	8001d32 <_printf_common+0x96>
 8001ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	3b00      	subs	r3, #0
 8001cec:	bf18      	it	ne
 8001cee:	2301      	movne	r3, #1
 8001cf0:	0692      	lsls	r2, r2, #26
 8001cf2:	d42b      	bmi.n	8001d4c <_printf_common+0xb0>
 8001cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	47c8      	blx	r9
 8001cfe:	3001      	adds	r0, #1
 8001d00:	d01e      	beq.n	8001d40 <_printf_common+0xa4>
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	6922      	ldr	r2, [r4, #16]
 8001d06:	f003 0306 	and.w	r3, r3, #6
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf02      	ittt	eq
 8001d0e:	68e5      	ldreq	r5, [r4, #12]
 8001d10:	6833      	ldreq	r3, [r6, #0]
 8001d12:	1aed      	subeq	r5, r5, r3
 8001d14:	68a3      	ldr	r3, [r4, #8]
 8001d16:	bf0c      	ite	eq
 8001d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d1c:	2500      	movne	r5, #0
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	bfc4      	itt	gt
 8001d22:	1a9b      	subgt	r3, r3, r2
 8001d24:	18ed      	addgt	r5, r5, r3
 8001d26:	2600      	movs	r6, #0
 8001d28:	341a      	adds	r4, #26
 8001d2a:	42b5      	cmp	r5, r6
 8001d2c:	d11a      	bne.n	8001d64 <_printf_common+0xc8>
 8001d2e:	2000      	movs	r0, #0
 8001d30:	e008      	b.n	8001d44 <_printf_common+0xa8>
 8001d32:	2301      	movs	r3, #1
 8001d34:	4652      	mov	r2, sl
 8001d36:	4641      	mov	r1, r8
 8001d38:	4638      	mov	r0, r7
 8001d3a:	47c8      	blx	r9
 8001d3c:	3001      	adds	r0, #1
 8001d3e:	d103      	bne.n	8001d48 <_printf_common+0xac>
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d48:	3501      	adds	r5, #1
 8001d4a:	e7c6      	b.n	8001cda <_printf_common+0x3e>
 8001d4c:	18e1      	adds	r1, r4, r3
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	2030      	movs	r0, #48	@ 0x30
 8001d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d56:	4422      	add	r2, r4
 8001d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d60:	3302      	adds	r3, #2
 8001d62:	e7c7      	b.n	8001cf4 <_printf_common+0x58>
 8001d64:	2301      	movs	r3, #1
 8001d66:	4622      	mov	r2, r4
 8001d68:	4641      	mov	r1, r8
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	47c8      	blx	r9
 8001d6e:	3001      	adds	r0, #1
 8001d70:	d0e6      	beq.n	8001d40 <_printf_common+0xa4>
 8001d72:	3601      	adds	r6, #1
 8001d74:	e7d9      	b.n	8001d2a <_printf_common+0x8e>
	...

08001d78 <_printf_i>:
 8001d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d7c:	7e0f      	ldrb	r7, [r1, #24]
 8001d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d80:	2f78      	cmp	r7, #120	@ 0x78
 8001d82:	4691      	mov	r9, r2
 8001d84:	4680      	mov	r8, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	469a      	mov	sl, r3
 8001d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d8e:	d807      	bhi.n	8001da0 <_printf_i+0x28>
 8001d90:	2f62      	cmp	r7, #98	@ 0x62
 8001d92:	d80a      	bhi.n	8001daa <_printf_i+0x32>
 8001d94:	2f00      	cmp	r7, #0
 8001d96:	f000 80d2 	beq.w	8001f3e <_printf_i+0x1c6>
 8001d9a:	2f58      	cmp	r7, #88	@ 0x58
 8001d9c:	f000 80b9 	beq.w	8001f12 <_printf_i+0x19a>
 8001da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001da8:	e03a      	b.n	8001e20 <_printf_i+0xa8>
 8001daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dae:	2b15      	cmp	r3, #21
 8001db0:	d8f6      	bhi.n	8001da0 <_printf_i+0x28>
 8001db2:	a101      	add	r1, pc, #4	@ (adr r1, 8001db8 <_printf_i+0x40>)
 8001db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001db8:	08001e11 	.word	0x08001e11
 8001dbc:	08001e25 	.word	0x08001e25
 8001dc0:	08001da1 	.word	0x08001da1
 8001dc4:	08001da1 	.word	0x08001da1
 8001dc8:	08001da1 	.word	0x08001da1
 8001dcc:	08001da1 	.word	0x08001da1
 8001dd0:	08001e25 	.word	0x08001e25
 8001dd4:	08001da1 	.word	0x08001da1
 8001dd8:	08001da1 	.word	0x08001da1
 8001ddc:	08001da1 	.word	0x08001da1
 8001de0:	08001da1 	.word	0x08001da1
 8001de4:	08001f25 	.word	0x08001f25
 8001de8:	08001e4f 	.word	0x08001e4f
 8001dec:	08001edf 	.word	0x08001edf
 8001df0:	08001da1 	.word	0x08001da1
 8001df4:	08001da1 	.word	0x08001da1
 8001df8:	08001f47 	.word	0x08001f47
 8001dfc:	08001da1 	.word	0x08001da1
 8001e00:	08001e4f 	.word	0x08001e4f
 8001e04:	08001da1 	.word	0x08001da1
 8001e08:	08001da1 	.word	0x08001da1
 8001e0c:	08001ee7 	.word	0x08001ee7
 8001e10:	6833      	ldr	r3, [r6, #0]
 8001e12:	1d1a      	adds	r2, r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6032      	str	r2, [r6, #0]
 8001e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e20:	2301      	movs	r3, #1
 8001e22:	e09d      	b.n	8001f60 <_printf_i+0x1e8>
 8001e24:	6833      	ldr	r3, [r6, #0]
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	1d19      	adds	r1, r3, #4
 8001e2a:	6031      	str	r1, [r6, #0]
 8001e2c:	0606      	lsls	r6, r0, #24
 8001e2e:	d501      	bpl.n	8001e34 <_printf_i+0xbc>
 8001e30:	681d      	ldr	r5, [r3, #0]
 8001e32:	e003      	b.n	8001e3c <_printf_i+0xc4>
 8001e34:	0645      	lsls	r5, r0, #25
 8001e36:	d5fb      	bpl.n	8001e30 <_printf_i+0xb8>
 8001e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e3c:	2d00      	cmp	r5, #0
 8001e3e:	da03      	bge.n	8001e48 <_printf_i+0xd0>
 8001e40:	232d      	movs	r3, #45	@ 0x2d
 8001e42:	426d      	negs	r5, r5
 8001e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e48:	4859      	ldr	r0, [pc, #356]	@ (8001fb0 <_printf_i+0x238>)
 8001e4a:	230a      	movs	r3, #10
 8001e4c:	e011      	b.n	8001e72 <_printf_i+0xfa>
 8001e4e:	6821      	ldr	r1, [r4, #0]
 8001e50:	6833      	ldr	r3, [r6, #0]
 8001e52:	0608      	lsls	r0, r1, #24
 8001e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e58:	d402      	bmi.n	8001e60 <_printf_i+0xe8>
 8001e5a:	0649      	lsls	r1, r1, #25
 8001e5c:	bf48      	it	mi
 8001e5e:	b2ad      	uxthmi	r5, r5
 8001e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e62:	4853      	ldr	r0, [pc, #332]	@ (8001fb0 <_printf_i+0x238>)
 8001e64:	6033      	str	r3, [r6, #0]
 8001e66:	bf14      	ite	ne
 8001e68:	230a      	movne	r3, #10
 8001e6a:	2308      	moveq	r3, #8
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e72:	6866      	ldr	r6, [r4, #4]
 8001e74:	60a6      	str	r6, [r4, #8]
 8001e76:	2e00      	cmp	r6, #0
 8001e78:	bfa2      	ittt	ge
 8001e7a:	6821      	ldrge	r1, [r4, #0]
 8001e7c:	f021 0104 	bicge.w	r1, r1, #4
 8001e80:	6021      	strge	r1, [r4, #0]
 8001e82:	b90d      	cbnz	r5, 8001e88 <_printf_i+0x110>
 8001e84:	2e00      	cmp	r6, #0
 8001e86:	d04b      	beq.n	8001f20 <_printf_i+0x1a8>
 8001e88:	4616      	mov	r6, r2
 8001e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8001e92:	5dc7      	ldrb	r7, [r0, r7]
 8001e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e98:	462f      	mov	r7, r5
 8001e9a:	42bb      	cmp	r3, r7
 8001e9c:	460d      	mov	r5, r1
 8001e9e:	d9f4      	bls.n	8001e8a <_printf_i+0x112>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d10b      	bne.n	8001ebc <_printf_i+0x144>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	07df      	lsls	r7, r3, #31
 8001ea8:	d508      	bpl.n	8001ebc <_printf_i+0x144>
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	6861      	ldr	r1, [r4, #4]
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	bfde      	ittt	le
 8001eb2:	2330      	movle	r3, #48	@ 0x30
 8001eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ebc:	1b92      	subs	r2, r2, r6
 8001ebe:	6122      	str	r2, [r4, #16]
 8001ec0:	f8cd a000 	str.w	sl, [sp]
 8001ec4:	464b      	mov	r3, r9
 8001ec6:	aa03      	add	r2, sp, #12
 8001ec8:	4621      	mov	r1, r4
 8001eca:	4640      	mov	r0, r8
 8001ecc:	f7ff fee6 	bl	8001c9c <_printf_common>
 8001ed0:	3001      	adds	r0, #1
 8001ed2:	d14a      	bne.n	8001f6a <_printf_i+0x1f2>
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	b004      	add	sp, #16
 8001eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	6023      	str	r3, [r4, #0]
 8001ee6:	4833      	ldr	r0, [pc, #204]	@ (8001fb4 <_printf_i+0x23c>)
 8001ee8:	2778      	movs	r7, #120	@ 0x78
 8001eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	6831      	ldr	r1, [r6, #0]
 8001ef2:	061f      	lsls	r7, r3, #24
 8001ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8001ef8:	d402      	bmi.n	8001f00 <_printf_i+0x188>
 8001efa:	065f      	lsls	r7, r3, #25
 8001efc:	bf48      	it	mi
 8001efe:	b2ad      	uxthmi	r5, r5
 8001f00:	6031      	str	r1, [r6, #0]
 8001f02:	07d9      	lsls	r1, r3, #31
 8001f04:	bf44      	itt	mi
 8001f06:	f043 0320 	orrmi.w	r3, r3, #32
 8001f0a:	6023      	strmi	r3, [r4, #0]
 8001f0c:	b11d      	cbz	r5, 8001f16 <_printf_i+0x19e>
 8001f0e:	2310      	movs	r3, #16
 8001f10:	e7ac      	b.n	8001e6c <_printf_i+0xf4>
 8001f12:	4827      	ldr	r0, [pc, #156]	@ (8001fb0 <_printf_i+0x238>)
 8001f14:	e7e9      	b.n	8001eea <_printf_i+0x172>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	f023 0320 	bic.w	r3, r3, #32
 8001f1c:	6023      	str	r3, [r4, #0]
 8001f1e:	e7f6      	b.n	8001f0e <_printf_i+0x196>
 8001f20:	4616      	mov	r6, r2
 8001f22:	e7bd      	b.n	8001ea0 <_printf_i+0x128>
 8001f24:	6833      	ldr	r3, [r6, #0]
 8001f26:	6825      	ldr	r5, [r4, #0]
 8001f28:	6961      	ldr	r1, [r4, #20]
 8001f2a:	1d18      	adds	r0, r3, #4
 8001f2c:	6030      	str	r0, [r6, #0]
 8001f2e:	062e      	lsls	r6, r5, #24
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	d501      	bpl.n	8001f38 <_printf_i+0x1c0>
 8001f34:	6019      	str	r1, [r3, #0]
 8001f36:	e002      	b.n	8001f3e <_printf_i+0x1c6>
 8001f38:	0668      	lsls	r0, r5, #25
 8001f3a:	d5fb      	bpl.n	8001f34 <_printf_i+0x1bc>
 8001f3c:	8019      	strh	r1, [r3, #0]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6123      	str	r3, [r4, #16]
 8001f42:	4616      	mov	r6, r2
 8001f44:	e7bc      	b.n	8001ec0 <_printf_i+0x148>
 8001f46:	6833      	ldr	r3, [r6, #0]
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	6032      	str	r2, [r6, #0]
 8001f4c:	681e      	ldr	r6, [r3, #0]
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7fe f944 	bl	80001e0 <memchr>
 8001f58:	b108      	cbz	r0, 8001f5e <_printf_i+0x1e6>
 8001f5a:	1b80      	subs	r0, r0, r6
 8001f5c:	6060      	str	r0, [r4, #4]
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	6123      	str	r3, [r4, #16]
 8001f62:	2300      	movs	r3, #0
 8001f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f68:	e7aa      	b.n	8001ec0 <_printf_i+0x148>
 8001f6a:	6923      	ldr	r3, [r4, #16]
 8001f6c:	4632      	mov	r2, r6
 8001f6e:	4649      	mov	r1, r9
 8001f70:	4640      	mov	r0, r8
 8001f72:	47d0      	blx	sl
 8001f74:	3001      	adds	r0, #1
 8001f76:	d0ad      	beq.n	8001ed4 <_printf_i+0x15c>
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	079b      	lsls	r3, r3, #30
 8001f7c:	d413      	bmi.n	8001fa6 <_printf_i+0x22e>
 8001f7e:	68e0      	ldr	r0, [r4, #12]
 8001f80:	9b03      	ldr	r3, [sp, #12]
 8001f82:	4298      	cmp	r0, r3
 8001f84:	bfb8      	it	lt
 8001f86:	4618      	movlt	r0, r3
 8001f88:	e7a6      	b.n	8001ed8 <_printf_i+0x160>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4632      	mov	r2, r6
 8001f8e:	4649      	mov	r1, r9
 8001f90:	4640      	mov	r0, r8
 8001f92:	47d0      	blx	sl
 8001f94:	3001      	adds	r0, #1
 8001f96:	d09d      	beq.n	8001ed4 <_printf_i+0x15c>
 8001f98:	3501      	adds	r5, #1
 8001f9a:	68e3      	ldr	r3, [r4, #12]
 8001f9c:	9903      	ldr	r1, [sp, #12]
 8001f9e:	1a5b      	subs	r3, r3, r1
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	dcf2      	bgt.n	8001f8a <_printf_i+0x212>
 8001fa4:	e7eb      	b.n	8001f7e <_printf_i+0x206>
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	f104 0619 	add.w	r6, r4, #25
 8001fac:	e7f5      	b.n	8001f9a <_printf_i+0x222>
 8001fae:	bf00      	nop
 8001fb0:	08002f01 	.word	0x08002f01
 8001fb4:	08002f12 	.word	0x08002f12

08001fb8 <__svfiscanf_r>:
 8001fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001fc0:	07df      	lsls	r7, r3, #31
 8001fc2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	4691      	mov	r9, r2
 8001fcc:	d405      	bmi.n	8001fda <__svfiscanf_r+0x22>
 8001fce:	898b      	ldrh	r3, [r1, #12]
 8001fd0:	0598      	lsls	r0, r3, #22
 8001fd2:	d402      	bmi.n	8001fda <__svfiscanf_r+0x22>
 8001fd4:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8001fd6:	f7ff fc24 	bl	8001822 <__retarget_lock_acquire_recursive>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8001fe0:	4ba7      	ldr	r3, [pc, #668]	@ (8002280 <__svfiscanf_r+0x2c8>)
 8001fe2:	93a0      	str	r3, [sp, #640]	@ 0x280
 8001fe4:	f10d 0804 	add.w	r8, sp, #4
 8001fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8002284 <__svfiscanf_r+0x2cc>)
 8001fea:	4fa7      	ldr	r7, [pc, #668]	@ (8002288 <__svfiscanf_r+0x2d0>)
 8001fec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8001ff0:	93a1      	str	r3, [sp, #644]	@ 0x284
 8001ff2:	9500      	str	r5, [sp, #0]
 8001ff4:	f899 3000 	ldrb.w	r3, [r9]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 816c 	beq.w	80022d6 <__svfiscanf_r+0x31e>
 8001ffe:	5cf9      	ldrb	r1, [r7, r3]
 8002000:	f011 0108 	ands.w	r1, r1, #8
 8002004:	f109 0501 	add.w	r5, r9, #1
 8002008:	d019      	beq.n	800203e <__svfiscanf_r+0x86>
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	dd0f      	ble.n	8002030 <__svfiscanf_r+0x78>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	5cba      	ldrb	r2, [r7, r2]
 8002016:	0711      	lsls	r1, r2, #28
 8002018:	d401      	bmi.n	800201e <__svfiscanf_r+0x66>
 800201a:	46a9      	mov	r9, r5
 800201c:	e7ea      	b.n	8001ff4 <__svfiscanf_r+0x3c>
 800201e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002020:	3201      	adds	r2, #1
 8002022:	9245      	str	r2, [sp, #276]	@ 0x114
 8002024:	6862      	ldr	r2, [r4, #4]
 8002026:	3301      	adds	r3, #1
 8002028:	3a01      	subs	r2, #1
 800202a:	6062      	str	r2, [r4, #4]
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	e7ec      	b.n	800200a <__svfiscanf_r+0x52>
 8002030:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002032:	4621      	mov	r1, r4
 8002034:	4630      	mov	r0, r6
 8002036:	4798      	blx	r3
 8002038:	2800      	cmp	r0, #0
 800203a:	d0e9      	beq.n	8002010 <__svfiscanf_r+0x58>
 800203c:	e7ed      	b.n	800201a <__svfiscanf_r+0x62>
 800203e:	2b25      	cmp	r3, #37	@ 0x25
 8002040:	d012      	beq.n	8002068 <__svfiscanf_r+0xb0>
 8002042:	4699      	mov	r9, r3
 8002044:	6863      	ldr	r3, [r4, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f340 8095 	ble.w	8002176 <__svfiscanf_r+0x1be>
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	7813      	ldrb	r3, [r2, #0]
 8002050:	454b      	cmp	r3, r9
 8002052:	f040 8140 	bne.w	80022d6 <__svfiscanf_r+0x31e>
 8002056:	6863      	ldr	r3, [r4, #4]
 8002058:	3b01      	subs	r3, #1
 800205a:	6063      	str	r3, [r4, #4]
 800205c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800205e:	3201      	adds	r2, #1
 8002060:	3301      	adds	r3, #1
 8002062:	6022      	str	r2, [r4, #0]
 8002064:	9345      	str	r3, [sp, #276]	@ 0x114
 8002066:	e7d8      	b.n	800201a <__svfiscanf_r+0x62>
 8002068:	9141      	str	r1, [sp, #260]	@ 0x104
 800206a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800206c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002070:	2b2a      	cmp	r3, #42	@ 0x2a
 8002072:	bf02      	ittt	eq
 8002074:	2310      	moveq	r3, #16
 8002076:	9341      	streq	r3, [sp, #260]	@ 0x104
 8002078:	f109 0502 	addeq.w	r5, r9, #2
 800207c:	220a      	movs	r2, #10
 800207e:	46a9      	mov	r9, r5
 8002080:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002084:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002088:	2b09      	cmp	r3, #9
 800208a:	d91f      	bls.n	80020cc <__svfiscanf_r+0x114>
 800208c:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800228c <__svfiscanf_r+0x2d4>
 8002090:	2203      	movs	r2, #3
 8002092:	4650      	mov	r0, sl
 8002094:	f7fe f8a4 	bl	80001e0 <memchr>
 8002098:	b138      	cbz	r0, 80020aa <__svfiscanf_r+0xf2>
 800209a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800209c:	eba0 000a 	sub.w	r0, r0, sl
 80020a0:	2301      	movs	r3, #1
 80020a2:	4083      	lsls	r3, r0
 80020a4:	4313      	orrs	r3, r2
 80020a6:	9341      	str	r3, [sp, #260]	@ 0x104
 80020a8:	464d      	mov	r5, r9
 80020aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80020ae:	2b78      	cmp	r3, #120	@ 0x78
 80020b0:	d807      	bhi.n	80020c2 <__svfiscanf_r+0x10a>
 80020b2:	2b57      	cmp	r3, #87	@ 0x57
 80020b4:	d811      	bhi.n	80020da <__svfiscanf_r+0x122>
 80020b6:	2b25      	cmp	r3, #37	@ 0x25
 80020b8:	d0c3      	beq.n	8002042 <__svfiscanf_r+0x8a>
 80020ba:	d857      	bhi.n	800216c <__svfiscanf_r+0x1b4>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80c1 	beq.w	8002244 <__svfiscanf_r+0x28c>
 80020c2:	2303      	movs	r3, #3
 80020c4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80020c6:	230a      	movs	r3, #10
 80020c8:	9342      	str	r3, [sp, #264]	@ 0x108
 80020ca:	e07e      	b.n	80021ca <__svfiscanf_r+0x212>
 80020cc:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80020ce:	fb02 1103 	mla	r1, r2, r3, r1
 80020d2:	3930      	subs	r1, #48	@ 0x30
 80020d4:	9143      	str	r1, [sp, #268]	@ 0x10c
 80020d6:	464d      	mov	r5, r9
 80020d8:	e7d1      	b.n	800207e <__svfiscanf_r+0xc6>
 80020da:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80020de:	2a20      	cmp	r2, #32
 80020e0:	d8ef      	bhi.n	80020c2 <__svfiscanf_r+0x10a>
 80020e2:	a101      	add	r1, pc, #4	@ (adr r1, 80020e8 <__svfiscanf_r+0x130>)
 80020e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80020e8:	080021a9 	.word	0x080021a9
 80020ec:	080020c3 	.word	0x080020c3
 80020f0:	080020c3 	.word	0x080020c3
 80020f4:	08002203 	.word	0x08002203
 80020f8:	080020c3 	.word	0x080020c3
 80020fc:	080020c3 	.word	0x080020c3
 8002100:	080020c3 	.word	0x080020c3
 8002104:	080020c3 	.word	0x080020c3
 8002108:	080020c3 	.word	0x080020c3
 800210c:	080020c3 	.word	0x080020c3
 8002110:	080020c3 	.word	0x080020c3
 8002114:	08002219 	.word	0x08002219
 8002118:	080021ff 	.word	0x080021ff
 800211c:	08002173 	.word	0x08002173
 8002120:	08002173 	.word	0x08002173
 8002124:	08002173 	.word	0x08002173
 8002128:	080020c3 	.word	0x080020c3
 800212c:	080021bb 	.word	0x080021bb
 8002130:	080020c3 	.word	0x080020c3
 8002134:	080020c3 	.word	0x080020c3
 8002138:	080020c3 	.word	0x080020c3
 800213c:	080020c3 	.word	0x080020c3
 8002140:	08002229 	.word	0x08002229
 8002144:	080021c3 	.word	0x080021c3
 8002148:	080021a1 	.word	0x080021a1
 800214c:	080020c3 	.word	0x080020c3
 8002150:	080020c3 	.word	0x080020c3
 8002154:	08002225 	.word	0x08002225
 8002158:	080020c3 	.word	0x080020c3
 800215c:	080021ff 	.word	0x080021ff
 8002160:	080020c3 	.word	0x080020c3
 8002164:	080020c3 	.word	0x080020c3
 8002168:	080021a9 	.word	0x080021a9
 800216c:	3b45      	subs	r3, #69	@ 0x45
 800216e:	2b02      	cmp	r3, #2
 8002170:	d8a7      	bhi.n	80020c2 <__svfiscanf_r+0x10a>
 8002172:	2305      	movs	r3, #5
 8002174:	e028      	b.n	80021c8 <__svfiscanf_r+0x210>
 8002176:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002178:	4621      	mov	r1, r4
 800217a:	4630      	mov	r0, r6
 800217c:	4798      	blx	r3
 800217e:	2800      	cmp	r0, #0
 8002180:	f43f af64 	beq.w	800204c <__svfiscanf_r+0x94>
 8002184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002186:	07da      	lsls	r2, r3, #31
 8002188:	f140 809d 	bpl.w	80022c6 <__svfiscanf_r+0x30e>
 800218c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800218e:	2800      	cmp	r0, #0
 8002190:	d061      	beq.n	8002256 <__svfiscanf_r+0x29e>
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	0659      	lsls	r1, r3, #25
 8002196:	d45e      	bmi.n	8002256 <__svfiscanf_r+0x29e>
 8002198:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800219c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021a0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	9241      	str	r2, [sp, #260]	@ 0x104
 80021a8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80021aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ae:	9241      	str	r2, [sp, #260]	@ 0x104
 80021b0:	2210      	movs	r2, #16
 80021b2:	2b6e      	cmp	r3, #110	@ 0x6e
 80021b4:	9242      	str	r2, [sp, #264]	@ 0x108
 80021b6:	d902      	bls.n	80021be <__svfiscanf_r+0x206>
 80021b8:	e005      	b.n	80021c6 <__svfiscanf_r+0x20e>
 80021ba:	2300      	movs	r3, #0
 80021bc:	9342      	str	r3, [sp, #264]	@ 0x108
 80021be:	2303      	movs	r3, #3
 80021c0:	e002      	b.n	80021c8 <__svfiscanf_r+0x210>
 80021c2:	2308      	movs	r3, #8
 80021c4:	9342      	str	r3, [sp, #264]	@ 0x108
 80021c6:	2304      	movs	r3, #4
 80021c8:	9347      	str	r3, [sp, #284]	@ 0x11c
 80021ca:	6863      	ldr	r3, [r4, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	dd45      	ble.n	800225c <__svfiscanf_r+0x2a4>
 80021d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80021d2:	0659      	lsls	r1, r3, #25
 80021d4:	d404      	bmi.n	80021e0 <__svfiscanf_r+0x228>
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	5cba      	ldrb	r2, [r7, r2]
 80021dc:	0712      	lsls	r2, r2, #28
 80021de:	d444      	bmi.n	800226a <__svfiscanf_r+0x2b2>
 80021e0:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	dc5b      	bgt.n	800229e <__svfiscanf_r+0x2e6>
 80021e6:	466b      	mov	r3, sp
 80021e8:	4622      	mov	r2, r4
 80021ea:	a941      	add	r1, sp, #260	@ 0x104
 80021ec:	4630      	mov	r0, r6
 80021ee:	f000 f893 	bl	8002318 <_scanf_chars>
 80021f2:	2801      	cmp	r0, #1
 80021f4:	d06f      	beq.n	80022d6 <__svfiscanf_r+0x31e>
 80021f6:	2802      	cmp	r0, #2
 80021f8:	f47f af0f 	bne.w	800201a <__svfiscanf_r+0x62>
 80021fc:	e7c2      	b.n	8002184 <__svfiscanf_r+0x1cc>
 80021fe:	220a      	movs	r2, #10
 8002200:	e7d7      	b.n	80021b2 <__svfiscanf_r+0x1fa>
 8002202:	4629      	mov	r1, r5
 8002204:	4640      	mov	r0, r8
 8002206:	f000 fb03 	bl	8002810 <__sccl>
 800220a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800220c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002210:	9341      	str	r3, [sp, #260]	@ 0x104
 8002212:	4605      	mov	r5, r0
 8002214:	2301      	movs	r3, #1
 8002216:	e7d7      	b.n	80021c8 <__svfiscanf_r+0x210>
 8002218:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800221a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221e:	9341      	str	r3, [sp, #260]	@ 0x104
 8002220:	2300      	movs	r3, #0
 8002222:	e7d1      	b.n	80021c8 <__svfiscanf_r+0x210>
 8002224:	2302      	movs	r3, #2
 8002226:	e7cf      	b.n	80021c8 <__svfiscanf_r+0x210>
 8002228:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800222a:	06c3      	lsls	r3, r0, #27
 800222c:	f53f aef5 	bmi.w	800201a <__svfiscanf_r+0x62>
 8002230:	9b00      	ldr	r3, [sp, #0]
 8002232:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002234:	1d19      	adds	r1, r3, #4
 8002236:	9100      	str	r1, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	07c0      	lsls	r0, r0, #31
 800223c:	bf4c      	ite	mi
 800223e:	801a      	strhmi	r2, [r3, #0]
 8002240:	601a      	strpl	r2, [r3, #0]
 8002242:	e6ea      	b.n	800201a <__svfiscanf_r+0x62>
 8002244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002246:	07de      	lsls	r6, r3, #31
 8002248:	d405      	bmi.n	8002256 <__svfiscanf_r+0x29e>
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	059d      	lsls	r5, r3, #22
 800224e:	d402      	bmi.n	8002256 <__svfiscanf_r+0x29e>
 8002250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002252:	f7ff fae7 	bl	8001824 <__retarget_lock_release_recursive>
 8002256:	f04f 30ff 	mov.w	r0, #4294967295
 800225a:	e79d      	b.n	8002198 <__svfiscanf_r+0x1e0>
 800225c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800225e:	4621      	mov	r1, r4
 8002260:	4630      	mov	r0, r6
 8002262:	4798      	blx	r3
 8002264:	2800      	cmp	r0, #0
 8002266:	d0b3      	beq.n	80021d0 <__svfiscanf_r+0x218>
 8002268:	e78c      	b.n	8002184 <__svfiscanf_r+0x1cc>
 800226a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800226c:	3201      	adds	r2, #1
 800226e:	9245      	str	r2, [sp, #276]	@ 0x114
 8002270:	6862      	ldr	r2, [r4, #4]
 8002272:	3a01      	subs	r2, #1
 8002274:	2a00      	cmp	r2, #0
 8002276:	6062      	str	r2, [r4, #4]
 8002278:	dd0a      	ble.n	8002290 <__svfiscanf_r+0x2d8>
 800227a:	3301      	adds	r3, #1
 800227c:	6023      	str	r3, [r4, #0]
 800227e:	e7aa      	b.n	80021d6 <__svfiscanf_r+0x21e>
 8002280:	080028f7 	.word	0x080028f7
 8002284:	08002729 	.word	0x08002729
 8002288:	08002f3f 	.word	0x08002f3f
 800228c:	08002ef6 	.word	0x08002ef6
 8002290:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002292:	4621      	mov	r1, r4
 8002294:	4630      	mov	r0, r6
 8002296:	4798      	blx	r3
 8002298:	2800      	cmp	r0, #0
 800229a:	d09c      	beq.n	80021d6 <__svfiscanf_r+0x21e>
 800229c:	e772      	b.n	8002184 <__svfiscanf_r+0x1cc>
 800229e:	2b04      	cmp	r3, #4
 80022a0:	dc06      	bgt.n	80022b0 <__svfiscanf_r+0x2f8>
 80022a2:	466b      	mov	r3, sp
 80022a4:	4622      	mov	r2, r4
 80022a6:	a941      	add	r1, sp, #260	@ 0x104
 80022a8:	4630      	mov	r0, r6
 80022aa:	f000 f88f 	bl	80023cc <_scanf_i>
 80022ae:	e7a0      	b.n	80021f2 <__svfiscanf_r+0x23a>
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <__svfiscanf_r+0x334>)
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f43f aeb1 	beq.w	800201a <__svfiscanf_r+0x62>
 80022b8:	466b      	mov	r3, sp
 80022ba:	4622      	mov	r2, r4
 80022bc:	a941      	add	r1, sp, #260	@ 0x104
 80022be:	4630      	mov	r0, r6
 80022c0:	f3af 8000 	nop.w
 80022c4:	e795      	b.n	80021f2 <__svfiscanf_r+0x23a>
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	0598      	lsls	r0, r3, #22
 80022ca:	f53f af5f 	bmi.w	800218c <__svfiscanf_r+0x1d4>
 80022ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022d0:	f7ff faa8 	bl	8001824 <__retarget_lock_release_recursive>
 80022d4:	e75a      	b.n	800218c <__svfiscanf_r+0x1d4>
 80022d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022d8:	07da      	lsls	r2, r3, #31
 80022da:	d405      	bmi.n	80022e8 <__svfiscanf_r+0x330>
 80022dc:	89a3      	ldrh	r3, [r4, #12]
 80022de:	059b      	lsls	r3, r3, #22
 80022e0:	d402      	bmi.n	80022e8 <__svfiscanf_r+0x330>
 80022e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022e4:	f7ff fa9e 	bl	8001824 <__retarget_lock_release_recursive>
 80022e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80022ea:	e755      	b.n	8002198 <__svfiscanf_r+0x1e0>
 80022ec:	00000000 	.word	0x00000000

080022f0 <_vfiscanf_r>:
 80022f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022f4:	460d      	mov	r5, r1
 80022f6:	4616      	mov	r6, r2
 80022f8:	461f      	mov	r7, r3
 80022fa:	4604      	mov	r4, r0
 80022fc:	b118      	cbz	r0, 8002306 <_vfiscanf_r+0x16>
 80022fe:	6a03      	ldr	r3, [r0, #32]
 8002300:	b90b      	cbnz	r3, 8002306 <_vfiscanf_r+0x16>
 8002302:	f7ff f977 	bl	80015f4 <__sinit>
 8002306:	463b      	mov	r3, r7
 8002308:	4632      	mov	r2, r6
 800230a:	4629      	mov	r1, r5
 800230c:	4620      	mov	r0, r4
 800230e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002312:	f7ff be51 	b.w	8001fb8 <__svfiscanf_r>
	...

08002318 <_scanf_chars>:
 8002318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800231c:	4615      	mov	r5, r2
 800231e:	688a      	ldr	r2, [r1, #8]
 8002320:	4680      	mov	r8, r0
 8002322:	460c      	mov	r4, r1
 8002324:	b932      	cbnz	r2, 8002334 <_scanf_chars+0x1c>
 8002326:	698a      	ldr	r2, [r1, #24]
 8002328:	2a00      	cmp	r2, #0
 800232a:	bf14      	ite	ne
 800232c:	f04f 32ff 	movne.w	r2, #4294967295
 8002330:	2201      	moveq	r2, #1
 8002332:	608a      	str	r2, [r1, #8]
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80023c8 <_scanf_chars+0xb0>
 800233a:	06d1      	lsls	r1, r2, #27
 800233c:	bf5f      	itttt	pl
 800233e:	681a      	ldrpl	r2, [r3, #0]
 8002340:	1d11      	addpl	r1, r2, #4
 8002342:	6019      	strpl	r1, [r3, #0]
 8002344:	6816      	ldrpl	r6, [r2, #0]
 8002346:	2700      	movs	r7, #0
 8002348:	69a0      	ldr	r0, [r4, #24]
 800234a:	b188      	cbz	r0, 8002370 <_scanf_chars+0x58>
 800234c:	2801      	cmp	r0, #1
 800234e:	d107      	bne.n	8002360 <_scanf_chars+0x48>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	6963      	ldr	r3, [r4, #20]
 8002356:	5c9b      	ldrb	r3, [r3, r2]
 8002358:	b953      	cbnz	r3, 8002370 <_scanf_chars+0x58>
 800235a:	2f00      	cmp	r7, #0
 800235c:	d031      	beq.n	80023c2 <_scanf_chars+0xaa>
 800235e:	e022      	b.n	80023a6 <_scanf_chars+0x8e>
 8002360:	2802      	cmp	r0, #2
 8002362:	d120      	bne.n	80023a6 <_scanf_chars+0x8e>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f819 3003 	ldrb.w	r3, [r9, r3]
 800236c:	071b      	lsls	r3, r3, #28
 800236e:	d41a      	bmi.n	80023a6 <_scanf_chars+0x8e>
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	06da      	lsls	r2, r3, #27
 8002374:	bf5e      	ittt	pl
 8002376:	682b      	ldrpl	r3, [r5, #0]
 8002378:	781b      	ldrbpl	r3, [r3, #0]
 800237a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800237e:	682a      	ldr	r2, [r5, #0]
 8002380:	686b      	ldr	r3, [r5, #4]
 8002382:	3201      	adds	r2, #1
 8002384:	602a      	str	r2, [r5, #0]
 8002386:	68a2      	ldr	r2, [r4, #8]
 8002388:	3b01      	subs	r3, #1
 800238a:	3a01      	subs	r2, #1
 800238c:	606b      	str	r3, [r5, #4]
 800238e:	3701      	adds	r7, #1
 8002390:	60a2      	str	r2, [r4, #8]
 8002392:	b142      	cbz	r2, 80023a6 <_scanf_chars+0x8e>
 8002394:	2b00      	cmp	r3, #0
 8002396:	dcd7      	bgt.n	8002348 <_scanf_chars+0x30>
 8002398:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800239c:	4629      	mov	r1, r5
 800239e:	4640      	mov	r0, r8
 80023a0:	4798      	blx	r3
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d0d0      	beq.n	8002348 <_scanf_chars+0x30>
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f013 0310 	ands.w	r3, r3, #16
 80023ac:	d105      	bne.n	80023ba <_scanf_chars+0xa2>
 80023ae:	68e2      	ldr	r2, [r4, #12]
 80023b0:	3201      	adds	r2, #1
 80023b2:	60e2      	str	r2, [r4, #12]
 80023b4:	69a2      	ldr	r2, [r4, #24]
 80023b6:	b102      	cbz	r2, 80023ba <_scanf_chars+0xa2>
 80023b8:	7033      	strb	r3, [r6, #0]
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	443b      	add	r3, r7
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	2000      	movs	r0, #0
 80023c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c6:	bf00      	nop
 80023c8:	08002f3f 	.word	0x08002f3f

080023cc <_scanf_i>:
 80023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	4698      	mov	r8, r3
 80023d2:	4b74      	ldr	r3, [pc, #464]	@ (80025a4 <_scanf_i+0x1d8>)
 80023d4:	460c      	mov	r4, r1
 80023d6:	4682      	mov	sl, r0
 80023d8:	4616      	mov	r6, r2
 80023da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023de:	b087      	sub	sp, #28
 80023e0:	ab03      	add	r3, sp, #12
 80023e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <_scanf_i+0x1dc>)
 80023e8:	69a1      	ldr	r1, [r4, #24]
 80023ea:	4a70      	ldr	r2, [pc, #448]	@ (80025ac <_scanf_i+0x1e0>)
 80023ec:	2903      	cmp	r1, #3
 80023ee:	bf08      	it	eq
 80023f0:	461a      	moveq	r2, r3
 80023f2:	68a3      	ldr	r3, [r4, #8]
 80023f4:	9201      	str	r2, [sp, #4]
 80023f6:	1e5a      	subs	r2, r3, #1
 80023f8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80023fc:	bf88      	it	hi
 80023fe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002402:	4627      	mov	r7, r4
 8002404:	bf82      	ittt	hi
 8002406:	eb03 0905 	addhi.w	r9, r3, r5
 800240a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800240e:	60a3      	strhi	r3, [r4, #8]
 8002410:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002414:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8002418:	bf98      	it	ls
 800241a:	f04f 0900 	movls.w	r9, #0
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	463d      	mov	r5, r7
 8002422:	f04f 0b00 	mov.w	fp, #0
 8002426:	6831      	ldr	r1, [r6, #0]
 8002428:	ab03      	add	r3, sp, #12
 800242a:	7809      	ldrb	r1, [r1, #0]
 800242c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002430:	2202      	movs	r2, #2
 8002432:	f7fd fed5 	bl	80001e0 <memchr>
 8002436:	b328      	cbz	r0, 8002484 <_scanf_i+0xb8>
 8002438:	f1bb 0f01 	cmp.w	fp, #1
 800243c:	d159      	bne.n	80024f2 <_scanf_i+0x126>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	b92a      	cbnz	r2, 800244e <_scanf_i+0x82>
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	2108      	movs	r1, #8
 8002446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244a:	6061      	str	r1, [r4, #4]
 800244c:	6022      	str	r2, [r4, #0]
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8002454:	6022      	str	r2, [r4, #0]
 8002456:	68a2      	ldr	r2, [r4, #8]
 8002458:	1e51      	subs	r1, r2, #1
 800245a:	60a1      	str	r1, [r4, #8]
 800245c:	b192      	cbz	r2, 8002484 <_scanf_i+0xb8>
 800245e:	6832      	ldr	r2, [r6, #0]
 8002460:	1c51      	adds	r1, r2, #1
 8002462:	6031      	str	r1, [r6, #0]
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	f805 2b01 	strb.w	r2, [r5], #1
 800246a:	6872      	ldr	r2, [r6, #4]
 800246c:	3a01      	subs	r2, #1
 800246e:	2a00      	cmp	r2, #0
 8002470:	6072      	str	r2, [r6, #4]
 8002472:	dc07      	bgt.n	8002484 <_scanf_i+0xb8>
 8002474:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8002478:	4631      	mov	r1, r6
 800247a:	4650      	mov	r0, sl
 800247c:	4790      	blx	r2
 800247e:	2800      	cmp	r0, #0
 8002480:	f040 8085 	bne.w	800258e <_scanf_i+0x1c2>
 8002484:	f10b 0b01 	add.w	fp, fp, #1
 8002488:	f1bb 0f03 	cmp.w	fp, #3
 800248c:	d1cb      	bne.n	8002426 <_scanf_i+0x5a>
 800248e:	6863      	ldr	r3, [r4, #4]
 8002490:	b90b      	cbnz	r3, 8002496 <_scanf_i+0xca>
 8002492:	230a      	movs	r3, #10
 8002494:	6063      	str	r3, [r4, #4]
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	4945      	ldr	r1, [pc, #276]	@ (80025b0 <_scanf_i+0x1e4>)
 800249a:	6960      	ldr	r0, [r4, #20]
 800249c:	1ac9      	subs	r1, r1, r3
 800249e:	f000 f9b7 	bl	8002810 <__sccl>
 80024a2:	f04f 0b00 	mov.w	fp, #0
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03d      	beq.n	800252a <_scanf_i+0x15e>
 80024ae:	6831      	ldr	r1, [r6, #0]
 80024b0:	6960      	ldr	r0, [r4, #20]
 80024b2:	f891 c000 	ldrb.w	ip, [r1]
 80024b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d035      	beq.n	800252a <_scanf_i+0x15e>
 80024be:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80024c2:	d124      	bne.n	800250e <_scanf_i+0x142>
 80024c4:	0510      	lsls	r0, r2, #20
 80024c6:	d522      	bpl.n	800250e <_scanf_i+0x142>
 80024c8:	f10b 0b01 	add.w	fp, fp, #1
 80024cc:	f1b9 0f00 	cmp.w	r9, #0
 80024d0:	d003      	beq.n	80024da <_scanf_i+0x10e>
 80024d2:	3301      	adds	r3, #1
 80024d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80024d8:	60a3      	str	r3, [r4, #8]
 80024da:	6873      	ldr	r3, [r6, #4]
 80024dc:	3b01      	subs	r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	6073      	str	r3, [r6, #4]
 80024e2:	dd1b      	ble.n	800251c <_scanf_i+0x150>
 80024e4:	6833      	ldr	r3, [r6, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	6033      	str	r3, [r6, #0]
 80024ea:	68a3      	ldr	r3, [r4, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60a3      	str	r3, [r4, #8]
 80024f0:	e7d9      	b.n	80024a6 <_scanf_i+0xda>
 80024f2:	f1bb 0f02 	cmp.w	fp, #2
 80024f6:	d1ae      	bne.n	8002456 <_scanf_i+0x8a>
 80024f8:	6822      	ldr	r2, [r4, #0]
 80024fa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80024fe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002502:	d1bf      	bne.n	8002484 <_scanf_i+0xb8>
 8002504:	2110      	movs	r1, #16
 8002506:	6061      	str	r1, [r4, #4]
 8002508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800250c:	e7a2      	b.n	8002454 <_scanf_i+0x88>
 800250e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8002512:	6022      	str	r2, [r4, #0]
 8002514:	780b      	ldrb	r3, [r1, #0]
 8002516:	f805 3b01 	strb.w	r3, [r5], #1
 800251a:	e7de      	b.n	80024da <_scanf_i+0x10e>
 800251c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002520:	4631      	mov	r1, r6
 8002522:	4650      	mov	r0, sl
 8002524:	4798      	blx	r3
 8002526:	2800      	cmp	r0, #0
 8002528:	d0df      	beq.n	80024ea <_scanf_i+0x11e>
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	05d9      	lsls	r1, r3, #23
 800252e:	d50d      	bpl.n	800254c <_scanf_i+0x180>
 8002530:	42bd      	cmp	r5, r7
 8002532:	d909      	bls.n	8002548 <_scanf_i+0x17c>
 8002534:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002538:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800253c:	4632      	mov	r2, r6
 800253e:	4650      	mov	r0, sl
 8002540:	4798      	blx	r3
 8002542:	f105 39ff 	add.w	r9, r5, #4294967295
 8002546:	464d      	mov	r5, r9
 8002548:	42bd      	cmp	r5, r7
 800254a:	d028      	beq.n	800259e <_scanf_i+0x1d2>
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	f012 0210 	ands.w	r2, r2, #16
 8002552:	d113      	bne.n	800257c <_scanf_i+0x1b0>
 8002554:	702a      	strb	r2, [r5, #0]
 8002556:	6863      	ldr	r3, [r4, #4]
 8002558:	9e01      	ldr	r6, [sp, #4]
 800255a:	4639      	mov	r1, r7
 800255c:	4650      	mov	r0, sl
 800255e:	47b0      	blx	r6
 8002560:	f8d8 3000 	ldr.w	r3, [r8]
 8002564:	6821      	ldr	r1, [r4, #0]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	f8c8 2000 	str.w	r2, [r8]
 800256c:	f011 0f20 	tst.w	r1, #32
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	d00f      	beq.n	8002594 <_scanf_i+0x1c8>
 8002574:	6018      	str	r0, [r3, #0]
 8002576:	68e3      	ldr	r3, [r4, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60e3      	str	r3, [r4, #12]
 800257c:	6923      	ldr	r3, [r4, #16]
 800257e:	1bed      	subs	r5, r5, r7
 8002580:	445d      	add	r5, fp
 8002582:	442b      	add	r3, r5
 8002584:	6123      	str	r3, [r4, #16]
 8002586:	2000      	movs	r0, #0
 8002588:	b007      	add	sp, #28
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258e:	f04f 0b00 	mov.w	fp, #0
 8002592:	e7ca      	b.n	800252a <_scanf_i+0x15e>
 8002594:	07ca      	lsls	r2, r1, #31
 8002596:	bf4c      	ite	mi
 8002598:	8018      	strhmi	r0, [r3, #0]
 800259a:	6018      	strpl	r0, [r3, #0]
 800259c:	e7eb      	b.n	8002576 <_scanf_i+0x1aa>
 800259e:	2001      	movs	r0, #1
 80025a0:	e7f2      	b.n	8002588 <_scanf_i+0x1bc>
 80025a2:	bf00      	nop
 80025a4:	08002ed4 	.word	0x08002ed4
 80025a8:	08002ca9 	.word	0x08002ca9
 80025ac:	08002d89 	.word	0x08002d89
 80025b0:	08002f33 	.word	0x08002f33

080025b4 <__sflush_r>:
 80025b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025bc:	0716      	lsls	r6, r2, #28
 80025be:	4605      	mov	r5, r0
 80025c0:	460c      	mov	r4, r1
 80025c2:	d454      	bmi.n	800266e <__sflush_r+0xba>
 80025c4:	684b      	ldr	r3, [r1, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dc02      	bgt.n	80025d0 <__sflush_r+0x1c>
 80025ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dd48      	ble.n	8002662 <__sflush_r+0xae>
 80025d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	d045      	beq.n	8002662 <__sflush_r+0xae>
 80025d6:	2300      	movs	r3, #0
 80025d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80025dc:	682f      	ldr	r7, [r5, #0]
 80025de:	6a21      	ldr	r1, [r4, #32]
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	d030      	beq.n	8002646 <__sflush_r+0x92>
 80025e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	0759      	lsls	r1, r3, #29
 80025ea:	d505      	bpl.n	80025f8 <__sflush_r+0x44>
 80025ec:	6863      	ldr	r3, [r4, #4]
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80025f2:	b10b      	cbz	r3, 80025f8 <__sflush_r+0x44>
 80025f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025f6:	1ad2      	subs	r2, r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025fc:	6a21      	ldr	r1, [r4, #32]
 80025fe:	4628      	mov	r0, r5
 8002600:	47b0      	blx	r6
 8002602:	1c43      	adds	r3, r0, #1
 8002604:	89a3      	ldrh	r3, [r4, #12]
 8002606:	d106      	bne.n	8002616 <__sflush_r+0x62>
 8002608:	6829      	ldr	r1, [r5, #0]
 800260a:	291d      	cmp	r1, #29
 800260c:	d82b      	bhi.n	8002666 <__sflush_r+0xb2>
 800260e:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <__sflush_r+0x104>)
 8002610:	410a      	asrs	r2, r1
 8002612:	07d6      	lsls	r6, r2, #31
 8002614:	d427      	bmi.n	8002666 <__sflush_r+0xb2>
 8002616:	2200      	movs	r2, #0
 8002618:	6062      	str	r2, [r4, #4]
 800261a:	04d9      	lsls	r1, r3, #19
 800261c:	6922      	ldr	r2, [r4, #16]
 800261e:	6022      	str	r2, [r4, #0]
 8002620:	d504      	bpl.n	800262c <__sflush_r+0x78>
 8002622:	1c42      	adds	r2, r0, #1
 8002624:	d101      	bne.n	800262a <__sflush_r+0x76>
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	b903      	cbnz	r3, 800262c <__sflush_r+0x78>
 800262a:	6560      	str	r0, [r4, #84]	@ 0x54
 800262c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800262e:	602f      	str	r7, [r5, #0]
 8002630:	b1b9      	cbz	r1, 8002662 <__sflush_r+0xae>
 8002632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002636:	4299      	cmp	r1, r3
 8002638:	d002      	beq.n	8002640 <__sflush_r+0x8c>
 800263a:	4628      	mov	r0, r5
 800263c:	f7ff f8f4 	bl	8001828 <_free_r>
 8002640:	2300      	movs	r3, #0
 8002642:	6363      	str	r3, [r4, #52]	@ 0x34
 8002644:	e00d      	b.n	8002662 <__sflush_r+0xae>
 8002646:	2301      	movs	r3, #1
 8002648:	4628      	mov	r0, r5
 800264a:	47b0      	blx	r6
 800264c:	4602      	mov	r2, r0
 800264e:	1c50      	adds	r0, r2, #1
 8002650:	d1c9      	bne.n	80025e6 <__sflush_r+0x32>
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0c6      	beq.n	80025e6 <__sflush_r+0x32>
 8002658:	2b1d      	cmp	r3, #29
 800265a:	d001      	beq.n	8002660 <__sflush_r+0xac>
 800265c:	2b16      	cmp	r3, #22
 800265e:	d11e      	bne.n	800269e <__sflush_r+0xea>
 8002660:	602f      	str	r7, [r5, #0]
 8002662:	2000      	movs	r0, #0
 8002664:	e022      	b.n	80026ac <__sflush_r+0xf8>
 8002666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800266a:	b21b      	sxth	r3, r3
 800266c:	e01b      	b.n	80026a6 <__sflush_r+0xf2>
 800266e:	690f      	ldr	r7, [r1, #16]
 8002670:	2f00      	cmp	r7, #0
 8002672:	d0f6      	beq.n	8002662 <__sflush_r+0xae>
 8002674:	0793      	lsls	r3, r2, #30
 8002676:	680e      	ldr	r6, [r1, #0]
 8002678:	bf08      	it	eq
 800267a:	694b      	ldreq	r3, [r1, #20]
 800267c:	600f      	str	r7, [r1, #0]
 800267e:	bf18      	it	ne
 8002680:	2300      	movne	r3, #0
 8002682:	eba6 0807 	sub.w	r8, r6, r7
 8002686:	608b      	str	r3, [r1, #8]
 8002688:	f1b8 0f00 	cmp.w	r8, #0
 800268c:	dde9      	ble.n	8002662 <__sflush_r+0xae>
 800268e:	6a21      	ldr	r1, [r4, #32]
 8002690:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002692:	4643      	mov	r3, r8
 8002694:	463a      	mov	r2, r7
 8002696:	4628      	mov	r0, r5
 8002698:	47b0      	blx	r6
 800269a:	2800      	cmp	r0, #0
 800269c:	dc08      	bgt.n	80026b0 <__sflush_r+0xfc>
 800269e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a6:	81a3      	strh	r3, [r4, #12]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b0:	4407      	add	r7, r0
 80026b2:	eba8 0800 	sub.w	r8, r8, r0
 80026b6:	e7e7      	b.n	8002688 <__sflush_r+0xd4>
 80026b8:	dfbffffe 	.word	0xdfbffffe

080026bc <_fflush_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	690b      	ldr	r3, [r1, #16]
 80026c0:	4605      	mov	r5, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	b913      	cbnz	r3, 80026cc <_fflush_r+0x10>
 80026c6:	2500      	movs	r5, #0
 80026c8:	4628      	mov	r0, r5
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	b118      	cbz	r0, 80026d6 <_fflush_r+0x1a>
 80026ce:	6a03      	ldr	r3, [r0, #32]
 80026d0:	b90b      	cbnz	r3, 80026d6 <_fflush_r+0x1a>
 80026d2:	f7fe ff8f 	bl	80015f4 <__sinit>
 80026d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f3      	beq.n	80026c6 <_fflush_r+0xa>
 80026de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80026e0:	07d0      	lsls	r0, r2, #31
 80026e2:	d404      	bmi.n	80026ee <_fflush_r+0x32>
 80026e4:	0599      	lsls	r1, r3, #22
 80026e6:	d402      	bmi.n	80026ee <_fflush_r+0x32>
 80026e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ea:	f7ff f89a 	bl	8001822 <__retarget_lock_acquire_recursive>
 80026ee:	4628      	mov	r0, r5
 80026f0:	4621      	mov	r1, r4
 80026f2:	f7ff ff5f 	bl	80025b4 <__sflush_r>
 80026f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026f8:	07da      	lsls	r2, r3, #31
 80026fa:	4605      	mov	r5, r0
 80026fc:	d4e4      	bmi.n	80026c8 <_fflush_r+0xc>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	059b      	lsls	r3, r3, #22
 8002702:	d4e1      	bmi.n	80026c8 <_fflush_r+0xc>
 8002704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002706:	f7ff f88d 	bl	8001824 <__retarget_lock_release_recursive>
 800270a:	e7dd      	b.n	80026c8 <_fflush_r+0xc>

0800270c <lflush>:
 800270c:	898b      	ldrh	r3, [r1, #12]
 800270e:	f003 0309 	and.w	r3, r3, #9
 8002712:	2b09      	cmp	r3, #9
 8002714:	d103      	bne.n	800271e <lflush+0x12>
 8002716:	4b03      	ldr	r3, [pc, #12]	@ (8002724 <lflush+0x18>)
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f7ff bfcf 	b.w	80026bc <_fflush_r>
 800271e:	2000      	movs	r0, #0
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000018 	.word	0x20000018

08002728 <__srefill_r>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	460c      	mov	r4, r1
 800272c:	4605      	mov	r5, r0
 800272e:	b118      	cbz	r0, 8002738 <__srefill_r+0x10>
 8002730:	6a03      	ldr	r3, [r0, #32]
 8002732:	b90b      	cbnz	r3, 8002738 <__srefill_r+0x10>
 8002734:	f7fe ff5e 	bl	80015f4 <__sinit>
 8002738:	2300      	movs	r3, #0
 800273a:	6063      	str	r3, [r4, #4]
 800273c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002740:	069e      	lsls	r6, r3, #26
 8002742:	d408      	bmi.n	8002756 <__srefill_r+0x2e>
 8002744:	0758      	lsls	r0, r3, #29
 8002746:	d445      	bmi.n	80027d4 <__srefill_r+0xac>
 8002748:	06d9      	lsls	r1, r3, #27
 800274a:	d407      	bmi.n	800275c <__srefill_r+0x34>
 800274c:	2209      	movs	r2, #9
 800274e:	602a      	str	r2, [r5, #0]
 8002750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002754:	81a3      	strh	r3, [r4, #12]
 8002756:	f04f 30ff 	mov.w	r0, #4294967295
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	071a      	lsls	r2, r3, #28
 800275e:	d50b      	bpl.n	8002778 <__srefill_r+0x50>
 8002760:	4621      	mov	r1, r4
 8002762:	4628      	mov	r0, r5
 8002764:	f7ff ffaa 	bl	80026bc <_fflush_r>
 8002768:	2800      	cmp	r0, #0
 800276a:	d1f4      	bne.n	8002756 <__srefill_r+0x2e>
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	60a0      	str	r0, [r4, #8]
 8002770:	f023 0308 	bic.w	r3, r3, #8
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	61a0      	str	r0, [r4, #24]
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	6923      	ldr	r3, [r4, #16]
 8002782:	b91b      	cbnz	r3, 800278c <__srefill_r+0x64>
 8002784:	4621      	mov	r1, r4
 8002786:	4628      	mov	r0, r5
 8002788:	f000 fb26 	bl	8002dd8 <__smakebuf_r>
 800278c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8002790:	07b3      	lsls	r3, r6, #30
 8002792:	d00f      	beq.n	80027b4 <__srefill_r+0x8c>
 8002794:	2301      	movs	r3, #1
 8002796:	4a1b      	ldr	r2, [pc, #108]	@ (8002804 <__srefill_r+0xdc>)
 8002798:	491b      	ldr	r1, [pc, #108]	@ (8002808 <__srefill_r+0xe0>)
 800279a:	481c      	ldr	r0, [pc, #112]	@ (800280c <__srefill_r+0xe4>)
 800279c:	81a3      	strh	r3, [r4, #12]
 800279e:	f7fe ff41 	bl	8001624 <_fwalk_sglue>
 80027a2:	81a6      	strh	r6, [r4, #12]
 80027a4:	f006 0609 	and.w	r6, r6, #9
 80027a8:	2e09      	cmp	r6, #9
 80027aa:	d103      	bne.n	80027b4 <__srefill_r+0x8c>
 80027ac:	4621      	mov	r1, r4
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7ff ff00 	bl	80025b4 <__sflush_r>
 80027b4:	6922      	ldr	r2, [r4, #16]
 80027b6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80027b8:	6963      	ldr	r3, [r4, #20]
 80027ba:	6a21      	ldr	r1, [r4, #32]
 80027bc:	6022      	str	r2, [r4, #0]
 80027be:	4628      	mov	r0, r5
 80027c0:	47b0      	blx	r6
 80027c2:	2800      	cmp	r0, #0
 80027c4:	6060      	str	r0, [r4, #4]
 80027c6:	dc17      	bgt.n	80027f8 <__srefill_r+0xd0>
 80027c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027cc:	d116      	bne.n	80027fc <__srefill_r+0xd4>
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	e7bf      	b.n	8002754 <__srefill_r+0x2c>
 80027d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027d6:	2900      	cmp	r1, #0
 80027d8:	d0d2      	beq.n	8002780 <__srefill_r+0x58>
 80027da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80027de:	4299      	cmp	r1, r3
 80027e0:	d002      	beq.n	80027e8 <__srefill_r+0xc0>
 80027e2:	4628      	mov	r0, r5
 80027e4:	f7ff f820 	bl	8001828 <_free_r>
 80027e8:	2300      	movs	r3, #0
 80027ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80027ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027ee:	6063      	str	r3, [r4, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0c5      	beq.n	8002780 <__srefill_r+0x58>
 80027f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	2000      	movs	r0, #0
 80027fa:	e7ae      	b.n	800275a <__srefill_r+0x32>
 80027fc:	2200      	movs	r2, #0
 80027fe:	6062      	str	r2, [r4, #4]
 8002800:	e7a6      	b.n	8002750 <__srefill_r+0x28>
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c
 8002808:	0800270d 	.word	0x0800270d
 800280c:	2000001c 	.word	0x2000001c

08002810 <__sccl>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	780b      	ldrb	r3, [r1, #0]
 8002814:	4604      	mov	r4, r0
 8002816:	2b5e      	cmp	r3, #94	@ 0x5e
 8002818:	bf0b      	itete	eq
 800281a:	784b      	ldrbeq	r3, [r1, #1]
 800281c:	1c4a      	addne	r2, r1, #1
 800281e:	1c8a      	addeq	r2, r1, #2
 8002820:	2100      	movne	r1, #0
 8002822:	bf08      	it	eq
 8002824:	2101      	moveq	r1, #1
 8002826:	3801      	subs	r0, #1
 8002828:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800282c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8002830:	42a8      	cmp	r0, r5
 8002832:	d1fb      	bne.n	800282c <__sccl+0x1c>
 8002834:	b90b      	cbnz	r3, 800283a <__sccl+0x2a>
 8002836:	1e50      	subs	r0, r2, #1
 8002838:	bd70      	pop	{r4, r5, r6, pc}
 800283a:	f081 0101 	eor.w	r1, r1, #1
 800283e:	54e1      	strb	r1, [r4, r3]
 8002840:	4610      	mov	r0, r2
 8002842:	4602      	mov	r2, r0
 8002844:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002848:	2d2d      	cmp	r5, #45	@ 0x2d
 800284a:	d005      	beq.n	8002858 <__sccl+0x48>
 800284c:	2d5d      	cmp	r5, #93	@ 0x5d
 800284e:	d016      	beq.n	800287e <__sccl+0x6e>
 8002850:	2d00      	cmp	r5, #0
 8002852:	d0f1      	beq.n	8002838 <__sccl+0x28>
 8002854:	462b      	mov	r3, r5
 8002856:	e7f2      	b.n	800283e <__sccl+0x2e>
 8002858:	7846      	ldrb	r6, [r0, #1]
 800285a:	2e5d      	cmp	r6, #93	@ 0x5d
 800285c:	d0fa      	beq.n	8002854 <__sccl+0x44>
 800285e:	42b3      	cmp	r3, r6
 8002860:	dcf8      	bgt.n	8002854 <__sccl+0x44>
 8002862:	3002      	adds	r0, #2
 8002864:	461a      	mov	r2, r3
 8002866:	3201      	adds	r2, #1
 8002868:	4296      	cmp	r6, r2
 800286a:	54a1      	strb	r1, [r4, r2]
 800286c:	dcfb      	bgt.n	8002866 <__sccl+0x56>
 800286e:	1af2      	subs	r2, r6, r3
 8002870:	3a01      	subs	r2, #1
 8002872:	1c5d      	adds	r5, r3, #1
 8002874:	42b3      	cmp	r3, r6
 8002876:	bfa8      	it	ge
 8002878:	2200      	movge	r2, #0
 800287a:	18ab      	adds	r3, r5, r2
 800287c:	e7e1      	b.n	8002842 <__sccl+0x32>
 800287e:	4610      	mov	r0, r2
 8002880:	e7da      	b.n	8002838 <__sccl+0x28>

08002882 <__submore>:
 8002882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002886:	460c      	mov	r4, r1
 8002888:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800288a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800288e:	4299      	cmp	r1, r3
 8002890:	d11d      	bne.n	80028ce <__submore+0x4c>
 8002892:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002896:	f7ff f833 	bl	8001900 <_malloc_r>
 800289a:	b918      	cbnz	r0, 80028a4 <__submore+0x22>
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80028aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80028ae:	6360      	str	r0, [r4, #52]	@ 0x34
 80028b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80028b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80028b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80028bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80028c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80028c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80028c8:	6020      	str	r0, [r4, #0]
 80028ca:	2000      	movs	r0, #0
 80028cc:	e7e8      	b.n	80028a0 <__submore+0x1e>
 80028ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80028d0:	0077      	lsls	r7, r6, #1
 80028d2:	463a      	mov	r2, r7
 80028d4:	f000 f940 	bl	8002b58 <_realloc_r>
 80028d8:	4605      	mov	r5, r0
 80028da:	2800      	cmp	r0, #0
 80028dc:	d0de      	beq.n	800289c <__submore+0x1a>
 80028de:	eb00 0806 	add.w	r8, r0, r6
 80028e2:	4601      	mov	r1, r0
 80028e4:	4632      	mov	r2, r6
 80028e6:	4640      	mov	r0, r8
 80028e8:	f000 f928 	bl	8002b3c <memcpy>
 80028ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80028f0:	f8c4 8000 	str.w	r8, [r4]
 80028f4:	e7e9      	b.n	80028ca <__submore+0x48>

080028f6 <_ungetc_r>:
 80028f6:	b570      	push	{r4, r5, r6, lr}
 80028f8:	460d      	mov	r5, r1
 80028fa:	1c69      	adds	r1, r5, #1
 80028fc:	4606      	mov	r6, r0
 80028fe:	4614      	mov	r4, r2
 8002900:	d01e      	beq.n	8002940 <_ungetc_r+0x4a>
 8002902:	b118      	cbz	r0, 800290c <_ungetc_r+0x16>
 8002904:	6a03      	ldr	r3, [r0, #32]
 8002906:	b90b      	cbnz	r3, 800290c <_ungetc_r+0x16>
 8002908:	f7fe fe74 	bl	80015f4 <__sinit>
 800290c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800290e:	07da      	lsls	r2, r3, #31
 8002910:	d405      	bmi.n	800291e <_ungetc_r+0x28>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	059b      	lsls	r3, r3, #22
 8002916:	d402      	bmi.n	800291e <_ungetc_r+0x28>
 8002918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800291a:	f7fe ff82 	bl	8001822 <__retarget_lock_acquire_recursive>
 800291e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002922:	f023 0220 	bic.w	r2, r3, #32
 8002926:	0758      	lsls	r0, r3, #29
 8002928:	81a2      	strh	r2, [r4, #12]
 800292a:	d422      	bmi.n	8002972 <_ungetc_r+0x7c>
 800292c:	06d9      	lsls	r1, r3, #27
 800292e:	d40a      	bmi.n	8002946 <_ungetc_r+0x50>
 8002930:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002932:	07d2      	lsls	r2, r2, #31
 8002934:	d404      	bmi.n	8002940 <_ungetc_r+0x4a>
 8002936:	0599      	lsls	r1, r3, #22
 8002938:	d402      	bmi.n	8002940 <_ungetc_r+0x4a>
 800293a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800293c:	f7fe ff72 	bl	8001824 <__retarget_lock_release_recursive>
 8002940:	f04f 35ff 	mov.w	r5, #4294967295
 8002944:	e046      	b.n	80029d4 <_ungetc_r+0xde>
 8002946:	071b      	lsls	r3, r3, #28
 8002948:	d50f      	bpl.n	800296a <_ungetc_r+0x74>
 800294a:	4621      	mov	r1, r4
 800294c:	4630      	mov	r0, r6
 800294e:	f7ff feb5 	bl	80026bc <_fflush_r>
 8002952:	b120      	cbz	r0, 800295e <_ungetc_r+0x68>
 8002954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002956:	07d8      	lsls	r0, r3, #31
 8002958:	d4f2      	bmi.n	8002940 <_ungetc_r+0x4a>
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	e7eb      	b.n	8002936 <_ungetc_r+0x40>
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	60a0      	str	r0, [r4, #8]
 8002962:	f023 0308 	bic.w	r3, r3, #8
 8002966:	81a3      	strh	r3, [r4, #12]
 8002968:	61a0      	str	r0, [r4, #24]
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	81a3      	strh	r3, [r4, #12]
 8002972:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002974:	6862      	ldr	r2, [r4, #4]
 8002976:	b2ed      	uxtb	r5, r5
 8002978:	b1d3      	cbz	r3, 80029b0 <_ungetc_r+0xba>
 800297a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800297c:	4293      	cmp	r3, r2
 800297e:	dc05      	bgt.n	800298c <_ungetc_r+0x96>
 8002980:	4621      	mov	r1, r4
 8002982:	4630      	mov	r0, r6
 8002984:	f7ff ff7d 	bl	8002882 <__submore>
 8002988:	2800      	cmp	r0, #0
 800298a:	d1e3      	bne.n	8002954 <_ungetc_r+0x5e>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	6022      	str	r2, [r4, #0]
 8002992:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	3301      	adds	r3, #1
 800299a:	6063      	str	r3, [r4, #4]
 800299c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800299e:	07da      	lsls	r2, r3, #31
 80029a0:	d418      	bmi.n	80029d4 <_ungetc_r+0xde>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	059b      	lsls	r3, r3, #22
 80029a6:	d415      	bmi.n	80029d4 <_ungetc_r+0xde>
 80029a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029aa:	f7fe ff3b 	bl	8001824 <__retarget_lock_release_recursive>
 80029ae:	e011      	b.n	80029d4 <_ungetc_r+0xde>
 80029b0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80029b2:	6920      	ldr	r0, [r4, #16]
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f001 0101 	and.w	r1, r1, #1
 80029ba:	b168      	cbz	r0, 80029d8 <_ungetc_r+0xe2>
 80029bc:	4298      	cmp	r0, r3
 80029be:	d20b      	bcs.n	80029d8 <_ungetc_r+0xe2>
 80029c0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80029c4:	42a8      	cmp	r0, r5
 80029c6:	d107      	bne.n	80029d8 <_ungetc_r+0xe2>
 80029c8:	3b01      	subs	r3, #1
 80029ca:	3201      	adds	r2, #1
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	6062      	str	r2, [r4, #4]
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d0e6      	beq.n	80029a2 <_ungetc_r+0xac>
 80029d4:	4628      	mov	r0, r5
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80029dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80029e2:	2303      	movs	r3, #3
 80029e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80029e6:	4623      	mov	r3, r4
 80029e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	2301      	movs	r3, #1
 80029f0:	6063      	str	r3, [r4, #4]
 80029f2:	e7ed      	b.n	80029d0 <_ungetc_r+0xda>

080029f4 <__swbuf_r>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	460e      	mov	r6, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	4605      	mov	r5, r0
 80029fc:	b118      	cbz	r0, 8002a06 <__swbuf_r+0x12>
 80029fe:	6a03      	ldr	r3, [r0, #32]
 8002a00:	b90b      	cbnz	r3, 8002a06 <__swbuf_r+0x12>
 8002a02:	f7fe fdf7 	bl	80015f4 <__sinit>
 8002a06:	69a3      	ldr	r3, [r4, #24]
 8002a08:	60a3      	str	r3, [r4, #8]
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	071a      	lsls	r2, r3, #28
 8002a0e:	d501      	bpl.n	8002a14 <__swbuf_r+0x20>
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	b943      	cbnz	r3, 8002a26 <__swbuf_r+0x32>
 8002a14:	4621      	mov	r1, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 f82a 	bl	8002a70 <__swsetup_r>
 8002a1c:	b118      	cbz	r0, 8002a26 <__swbuf_r+0x32>
 8002a1e:	f04f 37ff 	mov.w	r7, #4294967295
 8002a22:	4638      	mov	r0, r7
 8002a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	6922      	ldr	r2, [r4, #16]
 8002a2a:	1a98      	subs	r0, r3, r2
 8002a2c:	6963      	ldr	r3, [r4, #20]
 8002a2e:	b2f6      	uxtb	r6, r6
 8002a30:	4283      	cmp	r3, r0
 8002a32:	4637      	mov	r7, r6
 8002a34:	dc05      	bgt.n	8002a42 <__swbuf_r+0x4e>
 8002a36:	4621      	mov	r1, r4
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff fe3f 	bl	80026bc <_fflush_r>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d1ed      	bne.n	8002a1e <__swbuf_r+0x2a>
 8002a42:	68a3      	ldr	r3, [r4, #8]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	60a3      	str	r3, [r4, #8]
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	6022      	str	r2, [r4, #0]
 8002a4e:	701e      	strb	r6, [r3, #0]
 8002a50:	6962      	ldr	r2, [r4, #20]
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d004      	beq.n	8002a62 <__swbuf_r+0x6e>
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	07db      	lsls	r3, r3, #31
 8002a5c:	d5e1      	bpl.n	8002a22 <__swbuf_r+0x2e>
 8002a5e:	2e0a      	cmp	r6, #10
 8002a60:	d1df      	bne.n	8002a22 <__swbuf_r+0x2e>
 8002a62:	4621      	mov	r1, r4
 8002a64:	4628      	mov	r0, r5
 8002a66:	f7ff fe29 	bl	80026bc <_fflush_r>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d0d9      	beq.n	8002a22 <__swbuf_r+0x2e>
 8002a6e:	e7d6      	b.n	8002a1e <__swbuf_r+0x2a>

08002a70 <__swsetup_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <__swsetup_r+0xa8>)
 8002a74:	4605      	mov	r5, r0
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	460c      	mov	r4, r1
 8002a7a:	b118      	cbz	r0, 8002a84 <__swsetup_r+0x14>
 8002a7c:	6a03      	ldr	r3, [r0, #32]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <__swsetup_r+0x14>
 8002a80:	f7fe fdb8 	bl	80015f4 <__sinit>
 8002a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a88:	0719      	lsls	r1, r3, #28
 8002a8a:	d422      	bmi.n	8002ad2 <__swsetup_r+0x62>
 8002a8c:	06da      	lsls	r2, r3, #27
 8002a8e:	d407      	bmi.n	8002aa0 <__swsetup_r+0x30>
 8002a90:	2209      	movs	r2, #9
 8002a92:	602a      	str	r2, [r5, #0]
 8002a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a98:	81a3      	strh	r3, [r4, #12]
 8002a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9e:	e033      	b.n	8002b08 <__swsetup_r+0x98>
 8002aa0:	0758      	lsls	r0, r3, #29
 8002aa2:	d512      	bpl.n	8002aca <__swsetup_r+0x5a>
 8002aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002aa6:	b141      	cbz	r1, 8002aba <__swsetup_r+0x4a>
 8002aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002aac:	4299      	cmp	r1, r3
 8002aae:	d002      	beq.n	8002ab6 <__swsetup_r+0x46>
 8002ab0:	4628      	mov	r0, r5
 8002ab2:	f7fe feb9 	bl	8001828 <_free_r>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ac0:	81a3      	strh	r3, [r4, #12]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	b94b      	cbnz	r3, 8002aea <__swsetup_r+0x7a>
 8002ad6:	89a3      	ldrh	r3, [r4, #12]
 8002ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae0:	d003      	beq.n	8002aea <__swsetup_r+0x7a>
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	f000 f977 	bl	8002dd8 <__smakebuf_r>
 8002aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aee:	f013 0201 	ands.w	r2, r3, #1
 8002af2:	d00a      	beq.n	8002b0a <__swsetup_r+0x9a>
 8002af4:	2200      	movs	r2, #0
 8002af6:	60a2      	str	r2, [r4, #8]
 8002af8:	6962      	ldr	r2, [r4, #20]
 8002afa:	4252      	negs	r2, r2
 8002afc:	61a2      	str	r2, [r4, #24]
 8002afe:	6922      	ldr	r2, [r4, #16]
 8002b00:	b942      	cbnz	r2, 8002b14 <__swsetup_r+0xa4>
 8002b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b06:	d1c5      	bne.n	8002a94 <__swsetup_r+0x24>
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
 8002b0a:	0799      	lsls	r1, r3, #30
 8002b0c:	bf58      	it	pl
 8002b0e:	6962      	ldrpl	r2, [r4, #20]
 8002b10:	60a2      	str	r2, [r4, #8]
 8002b12:	e7f4      	b.n	8002afe <__swsetup_r+0x8e>
 8002b14:	2000      	movs	r0, #0
 8002b16:	e7f7      	b.n	8002b08 <__swsetup_r+0x98>
 8002b18:	20000018 	.word	0x20000018

08002b1c <_sbrk_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	4d06      	ldr	r5, [pc, #24]	@ (8002b38 <_sbrk_r+0x1c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	4604      	mov	r4, r0
 8002b24:	4608      	mov	r0, r1
 8002b26:	602b      	str	r3, [r5, #0]
 8002b28:	f7fd feea 	bl	8000900 <_sbrk>
 8002b2c:	1c43      	adds	r3, r0, #1
 8002b2e:	d102      	bne.n	8002b36 <_sbrk_r+0x1a>
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	b103      	cbz	r3, 8002b36 <_sbrk_r+0x1a>
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	2000022c 	.word	0x2000022c

08002b3c <memcpy>:
 8002b3c:	440a      	add	r2, r1
 8002b3e:	4291      	cmp	r1, r2
 8002b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b44:	d100      	bne.n	8002b48 <memcpy+0xc>
 8002b46:	4770      	bx	lr
 8002b48:	b510      	push	{r4, lr}
 8002b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b52:	4291      	cmp	r1, r2
 8002b54:	d1f9      	bne.n	8002b4a <memcpy+0xe>
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <_realloc_r>:
 8002b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	4680      	mov	r8, r0
 8002b5e:	4615      	mov	r5, r2
 8002b60:	460c      	mov	r4, r1
 8002b62:	b921      	cbnz	r1, 8002b6e <_realloc_r+0x16>
 8002b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b68:	4611      	mov	r1, r2
 8002b6a:	f7fe bec9 	b.w	8001900 <_malloc_r>
 8002b6e:	b92a      	cbnz	r2, 8002b7c <_realloc_r+0x24>
 8002b70:	f7fe fe5a 	bl	8001828 <_free_r>
 8002b74:	2400      	movs	r4, #0
 8002b76:	4620      	mov	r0, r4
 8002b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b7c:	f000 f98a 	bl	8002e94 <_malloc_usable_size_r>
 8002b80:	4285      	cmp	r5, r0
 8002b82:	4606      	mov	r6, r0
 8002b84:	d802      	bhi.n	8002b8c <_realloc_r+0x34>
 8002b86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002b8a:	d8f4      	bhi.n	8002b76 <_realloc_r+0x1e>
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4640      	mov	r0, r8
 8002b90:	f7fe feb6 	bl	8001900 <_malloc_r>
 8002b94:	4607      	mov	r7, r0
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d0ec      	beq.n	8002b74 <_realloc_r+0x1c>
 8002b9a:	42b5      	cmp	r5, r6
 8002b9c:	462a      	mov	r2, r5
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	bf28      	it	cs
 8002ba2:	4632      	movcs	r2, r6
 8002ba4:	f7ff ffca 	bl	8002b3c <memcpy>
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4640      	mov	r0, r8
 8002bac:	f7fe fe3c 	bl	8001828 <_free_r>
 8002bb0:	463c      	mov	r4, r7
 8002bb2:	e7e0      	b.n	8002b76 <_realloc_r+0x1e>

08002bb4 <_strtol_l.constprop.0>:
 8002bb4:	2b24      	cmp	r3, #36	@ 0x24
 8002bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bba:	4686      	mov	lr, r0
 8002bbc:	4690      	mov	r8, r2
 8002bbe:	d801      	bhi.n	8002bc4 <_strtol_l.constprop.0+0x10>
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d106      	bne.n	8002bd2 <_strtol_l.constprop.0+0x1e>
 8002bc4:	f7fe fe02 	bl	80017cc <__errno>
 8002bc8:	2316      	movs	r3, #22
 8002bca:	6003      	str	r3, [r0, #0]
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd2:	4834      	ldr	r0, [pc, #208]	@ (8002ca4 <_strtol_l.constprop.0+0xf0>)
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	462a      	mov	r2, r5
 8002bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002bdc:	5d06      	ldrb	r6, [r0, r4]
 8002bde:	f016 0608 	ands.w	r6, r6, #8
 8002be2:	d1f8      	bne.n	8002bd6 <_strtol_l.constprop.0+0x22>
 8002be4:	2c2d      	cmp	r4, #45	@ 0x2d
 8002be6:	d12d      	bne.n	8002c44 <_strtol_l.constprop.0+0x90>
 8002be8:	782c      	ldrb	r4, [r5, #0]
 8002bea:	2601      	movs	r6, #1
 8002bec:	1c95      	adds	r5, r2, #2
 8002bee:	f033 0210 	bics.w	r2, r3, #16
 8002bf2:	d109      	bne.n	8002c08 <_strtol_l.constprop.0+0x54>
 8002bf4:	2c30      	cmp	r4, #48	@ 0x30
 8002bf6:	d12a      	bne.n	8002c4e <_strtol_l.constprop.0+0x9a>
 8002bf8:	782a      	ldrb	r2, [r5, #0]
 8002bfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002bfe:	2a58      	cmp	r2, #88	@ 0x58
 8002c00:	d125      	bne.n	8002c4e <_strtol_l.constprop.0+0x9a>
 8002c02:	786c      	ldrb	r4, [r5, #1]
 8002c04:	2310      	movs	r3, #16
 8002c06:	3502      	adds	r5, #2
 8002c08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002c0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002c10:	2200      	movs	r2, #0
 8002c12:	fbbc f9f3 	udiv	r9, ip, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	fb03 ca19 	mls	sl, r3, r9, ip
 8002c1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002c20:	2f09      	cmp	r7, #9
 8002c22:	d81b      	bhi.n	8002c5c <_strtol_l.constprop.0+0xa8>
 8002c24:	463c      	mov	r4, r7
 8002c26:	42a3      	cmp	r3, r4
 8002c28:	dd27      	ble.n	8002c7a <_strtol_l.constprop.0+0xc6>
 8002c2a:	1c57      	adds	r7, r2, #1
 8002c2c:	d007      	beq.n	8002c3e <_strtol_l.constprop.0+0x8a>
 8002c2e:	4581      	cmp	r9, r0
 8002c30:	d320      	bcc.n	8002c74 <_strtol_l.constprop.0+0xc0>
 8002c32:	d101      	bne.n	8002c38 <_strtol_l.constprop.0+0x84>
 8002c34:	45a2      	cmp	sl, r4
 8002c36:	db1d      	blt.n	8002c74 <_strtol_l.constprop.0+0xc0>
 8002c38:	fb00 4003 	mla	r0, r0, r3, r4
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c42:	e7eb      	b.n	8002c1c <_strtol_l.constprop.0+0x68>
 8002c44:	2c2b      	cmp	r4, #43	@ 0x2b
 8002c46:	bf04      	itt	eq
 8002c48:	782c      	ldrbeq	r4, [r5, #0]
 8002c4a:	1c95      	addeq	r5, r2, #2
 8002c4c:	e7cf      	b.n	8002bee <_strtol_l.constprop.0+0x3a>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1da      	bne.n	8002c08 <_strtol_l.constprop.0+0x54>
 8002c52:	2c30      	cmp	r4, #48	@ 0x30
 8002c54:	bf0c      	ite	eq
 8002c56:	2308      	moveq	r3, #8
 8002c58:	230a      	movne	r3, #10
 8002c5a:	e7d5      	b.n	8002c08 <_strtol_l.constprop.0+0x54>
 8002c5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002c60:	2f19      	cmp	r7, #25
 8002c62:	d801      	bhi.n	8002c68 <_strtol_l.constprop.0+0xb4>
 8002c64:	3c37      	subs	r4, #55	@ 0x37
 8002c66:	e7de      	b.n	8002c26 <_strtol_l.constprop.0+0x72>
 8002c68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002c6c:	2f19      	cmp	r7, #25
 8002c6e:	d804      	bhi.n	8002c7a <_strtol_l.constprop.0+0xc6>
 8002c70:	3c57      	subs	r4, #87	@ 0x57
 8002c72:	e7d8      	b.n	8002c26 <_strtol_l.constprop.0+0x72>
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	e7e1      	b.n	8002c3e <_strtol_l.constprop.0+0x8a>
 8002c7a:	1c53      	adds	r3, r2, #1
 8002c7c:	d108      	bne.n	8002c90 <_strtol_l.constprop.0+0xdc>
 8002c7e:	2322      	movs	r3, #34	@ 0x22
 8002c80:	f8ce 3000 	str.w	r3, [lr]
 8002c84:	4660      	mov	r0, ip
 8002c86:	f1b8 0f00 	cmp.w	r8, #0
 8002c8a:	d0a0      	beq.n	8002bce <_strtol_l.constprop.0+0x1a>
 8002c8c:	1e69      	subs	r1, r5, #1
 8002c8e:	e006      	b.n	8002c9e <_strtol_l.constprop.0+0xea>
 8002c90:	b106      	cbz	r6, 8002c94 <_strtol_l.constprop.0+0xe0>
 8002c92:	4240      	negs	r0, r0
 8002c94:	f1b8 0f00 	cmp.w	r8, #0
 8002c98:	d099      	beq.n	8002bce <_strtol_l.constprop.0+0x1a>
 8002c9a:	2a00      	cmp	r2, #0
 8002c9c:	d1f6      	bne.n	8002c8c <_strtol_l.constprop.0+0xd8>
 8002c9e:	f8c8 1000 	str.w	r1, [r8]
 8002ca2:	e794      	b.n	8002bce <_strtol_l.constprop.0+0x1a>
 8002ca4:	08002f3f 	.word	0x08002f3f

08002ca8 <_strtol_r>:
 8002ca8:	f7ff bf84 	b.w	8002bb4 <_strtol_l.constprop.0>

08002cac <_strtoul_l.constprop.0>:
 8002cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	4e34      	ldr	r6, [pc, #208]	@ (8002d84 <_strtoul_l.constprop.0+0xd8>)
 8002cb2:	4686      	mov	lr, r0
 8002cb4:	460d      	mov	r5, r1
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002cbc:	5d37      	ldrb	r7, [r6, r4]
 8002cbe:	f017 0708 	ands.w	r7, r7, #8
 8002cc2:	d1f8      	bne.n	8002cb6 <_strtoul_l.constprop.0+0xa>
 8002cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8002cc6:	d12f      	bne.n	8002d28 <_strtoul_l.constprop.0+0x7c>
 8002cc8:	782c      	ldrb	r4, [r5, #0]
 8002cca:	2701      	movs	r7, #1
 8002ccc:	1c85      	adds	r5, r0, #2
 8002cce:	f033 0010 	bics.w	r0, r3, #16
 8002cd2:	d109      	bne.n	8002ce8 <_strtoul_l.constprop.0+0x3c>
 8002cd4:	2c30      	cmp	r4, #48	@ 0x30
 8002cd6:	d12c      	bne.n	8002d32 <_strtoul_l.constprop.0+0x86>
 8002cd8:	7828      	ldrb	r0, [r5, #0]
 8002cda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8002cde:	2858      	cmp	r0, #88	@ 0x58
 8002ce0:	d127      	bne.n	8002d32 <_strtoul_l.constprop.0+0x86>
 8002ce2:	786c      	ldrb	r4, [r5, #1]
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	3502      	adds	r5, #2
 8002ce8:	f04f 38ff 	mov.w	r8, #4294967295
 8002cec:	2600      	movs	r6, #0
 8002cee:	fbb8 f8f3 	udiv	r8, r8, r3
 8002cf2:	fb03 f908 	mul.w	r9, r3, r8
 8002cf6:	ea6f 0909 	mvn.w	r9, r9
 8002cfa:	4630      	mov	r0, r6
 8002cfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8002d00:	f1bc 0f09 	cmp.w	ip, #9
 8002d04:	d81c      	bhi.n	8002d40 <_strtoul_l.constprop.0+0x94>
 8002d06:	4664      	mov	r4, ip
 8002d08:	42a3      	cmp	r3, r4
 8002d0a:	dd2a      	ble.n	8002d62 <_strtoul_l.constprop.0+0xb6>
 8002d0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002d10:	d007      	beq.n	8002d22 <_strtoul_l.constprop.0+0x76>
 8002d12:	4580      	cmp	r8, r0
 8002d14:	d322      	bcc.n	8002d5c <_strtoul_l.constprop.0+0xb0>
 8002d16:	d101      	bne.n	8002d1c <_strtoul_l.constprop.0+0x70>
 8002d18:	45a1      	cmp	r9, r4
 8002d1a:	db1f      	blt.n	8002d5c <_strtoul_l.constprop.0+0xb0>
 8002d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8002d20:	2601      	movs	r6, #1
 8002d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d26:	e7e9      	b.n	8002cfc <_strtoul_l.constprop.0+0x50>
 8002d28:	2c2b      	cmp	r4, #43	@ 0x2b
 8002d2a:	bf04      	itt	eq
 8002d2c:	782c      	ldrbeq	r4, [r5, #0]
 8002d2e:	1c85      	addeq	r5, r0, #2
 8002d30:	e7cd      	b.n	8002cce <_strtoul_l.constprop.0+0x22>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1d8      	bne.n	8002ce8 <_strtoul_l.constprop.0+0x3c>
 8002d36:	2c30      	cmp	r4, #48	@ 0x30
 8002d38:	bf0c      	ite	eq
 8002d3a:	2308      	moveq	r3, #8
 8002d3c:	230a      	movne	r3, #10
 8002d3e:	e7d3      	b.n	8002ce8 <_strtoul_l.constprop.0+0x3c>
 8002d40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002d44:	f1bc 0f19 	cmp.w	ip, #25
 8002d48:	d801      	bhi.n	8002d4e <_strtoul_l.constprop.0+0xa2>
 8002d4a:	3c37      	subs	r4, #55	@ 0x37
 8002d4c:	e7dc      	b.n	8002d08 <_strtoul_l.constprop.0+0x5c>
 8002d4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8002d52:	f1bc 0f19 	cmp.w	ip, #25
 8002d56:	d804      	bhi.n	8002d62 <_strtoul_l.constprop.0+0xb6>
 8002d58:	3c57      	subs	r4, #87	@ 0x57
 8002d5a:	e7d5      	b.n	8002d08 <_strtoul_l.constprop.0+0x5c>
 8002d5c:	f04f 36ff 	mov.w	r6, #4294967295
 8002d60:	e7df      	b.n	8002d22 <_strtoul_l.constprop.0+0x76>
 8002d62:	1c73      	adds	r3, r6, #1
 8002d64:	d106      	bne.n	8002d74 <_strtoul_l.constprop.0+0xc8>
 8002d66:	2322      	movs	r3, #34	@ 0x22
 8002d68:	f8ce 3000 	str.w	r3, [lr]
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	b932      	cbnz	r2, 8002d7e <_strtoul_l.constprop.0+0xd2>
 8002d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d74:	b107      	cbz	r7, 8002d78 <_strtoul_l.constprop.0+0xcc>
 8002d76:	4240      	negs	r0, r0
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d0f9      	beq.n	8002d70 <_strtoul_l.constprop.0+0xc4>
 8002d7c:	b106      	cbz	r6, 8002d80 <_strtoul_l.constprop.0+0xd4>
 8002d7e:	1e69      	subs	r1, r5, #1
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	e7f5      	b.n	8002d70 <_strtoul_l.constprop.0+0xc4>
 8002d84:	08002f3f 	.word	0x08002f3f

08002d88 <_strtoul_r>:
 8002d88:	f7ff bf90 	b.w	8002cac <_strtoul_l.constprop.0>

08002d8c <__swhatbuf_r>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	460c      	mov	r4, r1
 8002d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d94:	2900      	cmp	r1, #0
 8002d96:	b096      	sub	sp, #88	@ 0x58
 8002d98:	4615      	mov	r5, r2
 8002d9a:	461e      	mov	r6, r3
 8002d9c:	da0d      	bge.n	8002dba <__swhatbuf_r+0x2e>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2340      	movne	r3, #64	@ 0x40
 8002dac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002db0:	2000      	movs	r0, #0
 8002db2:	6031      	str	r1, [r6, #0]
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	b016      	add	sp, #88	@ 0x58
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
 8002dba:	466a      	mov	r2, sp
 8002dbc:	f000 f848 	bl	8002e50 <_fstat_r>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	dbec      	blt.n	8002d9e <__swhatbuf_r+0x12>
 8002dc4:	9901      	ldr	r1, [sp, #4]
 8002dc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002dca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002dce:	4259      	negs	r1, r3
 8002dd0:	4159      	adcs	r1, r3
 8002dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd6:	e7eb      	b.n	8002db0 <__swhatbuf_r+0x24>

08002dd8 <__smakebuf_r>:
 8002dd8:	898b      	ldrh	r3, [r1, #12]
 8002dda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ddc:	079d      	lsls	r5, r3, #30
 8002dde:	4606      	mov	r6, r0
 8002de0:	460c      	mov	r4, r1
 8002de2:	d507      	bpl.n	8002df4 <__smakebuf_r+0x1c>
 8002de4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	6123      	str	r3, [r4, #16]
 8002dec:	2301      	movs	r3, #1
 8002dee:	6163      	str	r3, [r4, #20]
 8002df0:	b003      	add	sp, #12
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df4:	ab01      	add	r3, sp, #4
 8002df6:	466a      	mov	r2, sp
 8002df8:	f7ff ffc8 	bl	8002d8c <__swhatbuf_r>
 8002dfc:	9f00      	ldr	r7, [sp, #0]
 8002dfe:	4605      	mov	r5, r0
 8002e00:	4639      	mov	r1, r7
 8002e02:	4630      	mov	r0, r6
 8002e04:	f7fe fd7c 	bl	8001900 <_malloc_r>
 8002e08:	b948      	cbnz	r0, 8002e1e <__smakebuf_r+0x46>
 8002e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0e:	059a      	lsls	r2, r3, #22
 8002e10:	d4ee      	bmi.n	8002df0 <__smakebuf_r+0x18>
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	81a3      	strh	r3, [r4, #12]
 8002e1c:	e7e2      	b.n	8002de4 <__smakebuf_r+0xc>
 8002e1e:	89a3      	ldrh	r3, [r4, #12]
 8002e20:	6020      	str	r0, [r4, #0]
 8002e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e26:	81a3      	strh	r3, [r4, #12]
 8002e28:	9b01      	ldr	r3, [sp, #4]
 8002e2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e2e:	b15b      	cbz	r3, 8002e48 <__smakebuf_r+0x70>
 8002e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 f81d 	bl	8002e74 <_isatty_r>
 8002e3a:	b128      	cbz	r0, 8002e48 <__smakebuf_r+0x70>
 8002e3c:	89a3      	ldrh	r3, [r4, #12]
 8002e3e:	f023 0303 	bic.w	r3, r3, #3
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	81a3      	strh	r3, [r4, #12]
 8002e48:	89a3      	ldrh	r3, [r4, #12]
 8002e4a:	431d      	orrs	r5, r3
 8002e4c:	81a5      	strh	r5, [r4, #12]
 8002e4e:	e7cf      	b.n	8002df0 <__smakebuf_r+0x18>

08002e50 <_fstat_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d07      	ldr	r5, [pc, #28]	@ (8002e70 <_fstat_r+0x20>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	f7fd fd26 	bl	80008ae <_fstat>
 8002e62:	1c43      	adds	r3, r0, #1
 8002e64:	d102      	bne.n	8002e6c <_fstat_r+0x1c>
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	b103      	cbz	r3, 8002e6c <_fstat_r+0x1c>
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
 8002e6e:	bf00      	nop
 8002e70:	2000022c 	.word	0x2000022c

08002e74 <_isatty_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4d06      	ldr	r5, [pc, #24]	@ (8002e90 <_isatty_r+0x1c>)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	f7fd fd25 	bl	80008ce <_isatty>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d102      	bne.n	8002e8e <_isatty_r+0x1a>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b103      	cbz	r3, 8002e8e <_isatty_r+0x1a>
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	bd38      	pop	{r3, r4, r5, pc}
 8002e90:	2000022c 	.word	0x2000022c

08002e94 <_malloc_usable_size_r>:
 8002e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e98:	1f18      	subs	r0, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bfbc      	itt	lt
 8002e9e:	580b      	ldrlt	r3, [r1, r0]
 8002ea0:	18c0      	addlt	r0, r0, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
